{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","path":"vendor/titillium-web/styles.css","modified":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":1},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","path":"vendor/scrollLoading/style.css","modified":1},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","path":"vendor/scrollLoading/main.js","modified":1},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","path":"vendor/scrollLoading/jquery.scrollLoading.js","modified":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","path":"vendor/scrollLoading/images/preloader@2x.gif","modified":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","path":"vendor/scrollLoading/images/preloader.gif","modified":1},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","path":"vendor/jquery/2.0.3/jquery.min.js","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":1},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","path":"vendor/fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","path":"vendor/fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","path":"vendor/fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","path":"vendor/fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","path":"vendor/fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","path":"vendor/fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","path":"vendor/fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","path":"vendor/fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","path":"vendor/fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","path":"vendor/fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","path":"vendor/fancybox/blank.gif","modified":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1}],"Cache":[{"_id":"source/_posts/Kafka安装配置.md","shasum":"6b4d2f74771306f8cb3450bd30ad28b45b7e20e8","modified":1456889228000},{"_id":"source/_posts/LMAX-Distruptor.md","shasum":"6ac85ad8eb1c2c1d93f1ad35d58c497527326aa5","modified":1456385338000},{"_id":"source/_posts/K-近临算法.md","shasum":"42c76b56ca596594211473e87a7a6d64a3243c42","modified":1456378906000},{"_id":"source/_posts/Storm安装配置.md","shasum":"a13dc302e2195470e744ff74c4a56941fe912bfe","modified":1456889671000},{"_id":"source/_posts/MySQL连接问题123.md","shasum":"b6688d2e60860f5be392c5a2711d9de07f9fe7d0","modified":1456455684000},{"_id":"source/_posts/Vector-Clock.md","shasum":"61380cb84f4d704e77278e0c90ab5183ffd6d040","modified":1456732376000},{"_id":"source/_posts/P-Unit结合JUnit做并发性能测试.md","shasum":"32626b9aae98a5e0e2b57c829832ba221cd0b64e","modified":1456378790000},{"_id":"source/_posts/使用ID3生成决策树.md","shasum":"887ad6c541b8acdc742cec65b6f3cf6a4fd277df","modified":1456457281000},{"_id":"source/_posts/乐观锁VS悲观锁.md","shasum":"a084c461439de098e020924b3b1acce78d534391","modified":1456728232000},{"_id":"source/about/index.md","shasum":"344e6d670399da9a401246620b646f70e68b25d6","modified":1456384047000},{"_id":"source/_posts/别把自己当个超人.md","shasum":"8d62dcfd403639b9adeb6de8614e48abe55ca52a","modified":1456731068000},{"_id":"source/_posts/Hexo + Github搭建自己的博客.md","shasum":"373639a871b25cdeb19da4bd97a24c3ddbb86a3d","modified":1456465386000},{"_id":"themes/hueman/languages/en.yml","shasum":"f41c4ca0d39e630becaac0a1c8602ba5296535a6","modified":1456328980000},{"_id":"themes/hueman/README.md","shasum":"19244590bc775eba6566007a436b06d7ace8e42b","modified":1456328980000},{"_id":"themes/hueman/_config.yml","shasum":"1dc2528f18b4f54ad258188bbd347770060b78ca","modified":1456383899000},{"_id":"themes/hueman/LICENSE","shasum":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1456328980000},{"_id":"themes/hueman/languages/es.yml","shasum":"ba9bc234078220eed7383c9880e78232fd704897","modified":1456328980000},{"_id":"themes/hueman/languages/pt-BR.yml","shasum":"1302d56d7348d03a7425fcb2c6d3deeb3eafbe91","modified":1456328980000},{"_id":"themes/hueman/languages/id.yml","shasum":"ae279b3e2362ccbceb6dd3fc4c70f637615aab93","modified":1456328980000},{"_id":"themes/hueman/languages/fr.yml","shasum":"0094a977597bbdb8254c60c81011ebf9b182d1e3","modified":1456328980000},{"_id":"themes/hueman/languages/ru.yml","shasum":"c11ff7e5df592269d337e30677edee669efc2978","modified":1456328980000},{"_id":"themes/hueman/layout/archive.ejs","shasum":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1456328980000},{"_id":"themes/hueman/languages/zh-CN.yml","shasum":"b74c207a008cf0ba2e95cf695730fbde2e66f587","modified":1456328980000},{"_id":"themes/hueman/layout/category.ejs","shasum":"5096d3f019098d9940429152295f6d6161d887ba","modified":1456328980000},{"_id":"themes/hueman/layout/comment/disqus.ejs","shasum":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1456328980000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","shasum":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1456328980000},{"_id":"themes/hueman/layout/comment/index.ejs","shasum":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1456328980000},{"_id":"themes/hueman/layout/comment/counter.ejs","shasum":"13d2b93435398dc29a968f93326fbd18d4b28d8c","modified":1456328980000},{"_id":"themes/hueman/layout/common/article.ejs","shasum":"c30804f0b167053f731ad2a3429ddac603b1ac48","modified":1456328980000},{"_id":"themes/hueman/layout/comment/youyan.ejs","shasum":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1456328980000},{"_id":"themes/hueman/layout/common/archive.ejs","shasum":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1456328980000},{"_id":"themes/hueman/layout/comment/scripts.ejs","shasum":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1456328980000},{"_id":"themes/hueman/layout/common/header.ejs","shasum":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1456328980000},{"_id":"themes/hueman/layout/common/footer.ejs","shasum":"4d01bd3d28820936b0d09529b60e9d6930afc9fe","modified":1456328980000},{"_id":"themes/hueman/layout/common/content-title.ejs","shasum":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1456328980000},{"_id":"themes/hueman/layout/common/head.ejs","shasum":"a1e0d4ffec19ef066928bbcdea2fbb615a18680a","modified":1456328980000},{"_id":"themes/hueman/layout/common/post/category.ejs","shasum":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1456328980000},{"_id":"themes/hueman/layout/common/post/date.ejs","shasum":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1456328980000},{"_id":"themes/hueman/layout/common/post/tag.ejs","shasum":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1456328980000},{"_id":"themes/hueman/layout/common/post/nav.ejs","shasum":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1456328980000},{"_id":"themes/hueman/layout/common/scripts.ejs","shasum":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1456328980000},{"_id":"themes/hueman/layout/common/summary.ejs","shasum":"3ee280d4847f2cde7d450e298f917b10b9c5d507","modified":1456328980000},{"_id":"themes/hueman/layout/common/sidebar.ejs","shasum":"745666ee78b714aa34d8774a005a0598261ec349","modified":1456328980000},{"_id":"themes/hueman/layout/layout.ejs","shasum":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1456328980000},{"_id":"themes/hueman/layout/index.ejs","shasum":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1456328980000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","shasum":"a49ffb76c1897e5a60cee70e65c765d212dce500","modified":1456328980000},{"_id":"themes/hueman/layout/page.ejs","shasum":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1456328980000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","shasum":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1456328980000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","shasum":"d99089976258050666208f29000f84496fe1029c","modified":1456328980000},{"_id":"themes/hueman/layout/common/post/title.ejs","shasum":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1456328980000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","shasum":"45f11b8bc3c1ddbe907cf5b8b36488e6c0ee15b3","modified":1456328980000},{"_id":"themes/hueman/layout/search/baidu.ejs","shasum":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1456328980000},{"_id":"themes/hueman/layout/post.ejs","shasum":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1456328980000},{"_id":"themes/hueman/layout/search/index.ejs","shasum":"8057338370fbda31dc9f21ec99fb91fcbab9d5c7","modified":1456328980000},{"_id":"themes/hueman/layout/search/swiftype.ejs","shasum":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1456328980000},{"_id":"themes/hueman/layout/share/addtoany.ejs","shasum":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1456328980000},{"_id":"themes/hueman/layout/share/bdshare.ejs","shasum":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1456328980000},{"_id":"themes/hueman/layout/share/default.ejs","shasum":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1456328980000},{"_id":"themes/hueman/layout/share/index.ejs","shasum":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1456328980000},{"_id":"themes/hueman/layout/share/jiathis.ejs","shasum":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1456328980000},{"_id":"themes/hueman/layout/tag.ejs","shasum":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1456328980000},{"_id":"themes/hueman/layout/widget/archive.ejs","shasum":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1456328980000},{"_id":"themes/hueman/layout/widget/category.ejs","shasum":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1456328980000},{"_id":"themes/hueman/layout/widget/links.ejs","shasum":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1456328980000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","shasum":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1456328980000},{"_id":"themes/hueman/layout/widget/tag.ejs","shasum":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1456328980000},{"_id":"themes/hueman/scripts/excerpt.js","shasum":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1456328980000},{"_id":"themes/hueman/scripts/fancybox.js","shasum":"c1b01a9c2d96474cdd7e09657e522e4a03579413","modified":1456328980000},{"_id":"themes/hueman/scripts/meta.js","shasum":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1456328980000},{"_id":"themes/hueman/package.json","shasum":"13dcc13c13e0347515f7f92292ac0e1a824413cd","modified":1456328980000},{"_id":"themes/hueman/scripts/thumbnail.js","shasum":"8bd30b7e9294c11f0364dd1e840684aa961b736f","modified":1456328980000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","shasum":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1456328980000},{"_id":"themes/hueman/source/css/_extend.styl","shasum":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","shasum":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","shasum":"601eb70448a16b918df132f6fc41e891ae053653","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","shasum":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","shasum":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","shasum":"32cff3bef6fac3760fe78f203096477052a90552","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","shasum":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","shasum":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","shasum":"d84382bc8298f96730757391d3e761b7e640f406","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","shasum":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","shasum":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","shasum":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","shasum":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","shasum":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","shasum":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","shasum":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","shasum":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","shasum":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","shasum":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","shasum":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","shasum":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","shasum":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","shasum":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","shasum":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","shasum":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","shasum":"efa52713efc468abeeb2b9299704371583b857de","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","shasum":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","shasum":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","shasum":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","shasum":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","shasum":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","shasum":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/far.styl","shasum":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","shasum":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","shasum":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/github.styl","shasum":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","shasum":"bda816beee7b439814b514e6869dc678822be1bc","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","shasum":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","shasum":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","shasum":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","shasum":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/index.styl","shasum":"a7c35f55255d2455eb7274dbc7ad9dd263899297","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","shasum":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","shasum":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","shasum":"693078bbd72a2091ed30f506cc55949600b717af","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","shasum":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","shasum":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","shasum":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","shasum":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","shasum":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","shasum":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","shasum":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","shasum":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","shasum":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","shasum":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","shasum":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","shasum":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","shasum":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","shasum":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","shasum":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","shasum":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","shasum":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","shasum":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","shasum":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","shasum":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","shasum":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","shasum":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","shasum":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","shasum":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/archive.styl","shasum":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/assets.styl","shasum":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","shasum":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/article.styl","shasum":"5b05389db22550ffe09005e122d779fa350c387e","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/comment.styl","shasum":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/footer.styl","shasum":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/header.styl","shasum":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/nav.styl","shasum":"11e32468f993133e5d2bfe4f4efc68240746f8c6","modified":1456328980000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","shasum":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1456328980000},{"_id":"themes/hueman/source/css/_retina.styl","shasum":"6849940ab43a9bdd83db1fde8e1e7ba6897f9016","modified":1456328980000},{"_id":"themes/hueman/source/css/_variables.styl","shasum":"8799b5e8a3d706a344c6819a274cb9022628c6c4","modified":1456328980000},{"_id":"themes/hueman/source/css/images/logo-header.png","shasum":"5602e5aba2c6c39bebb46690741944a9ba7f1fd1","modified":1456380410000},{"_id":"themes/hueman/source/css/images/s-left.png","shasum":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1456328980000},{"_id":"themes/hueman/source/css/_responsive.styl","shasum":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1456328980000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","shasum":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1456328980000},{"_id":"themes/hueman/source/css/images/opacity-10.png","shasum":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1456328980000},{"_id":"themes/hueman/source/css/style.styl","shasum":"fdb2bdeb5c8364a72743c52c481c8c1dfa89e73b","modified":1456328980000},{"_id":"themes/hueman/source/js/main.js","shasum":"5027fe5ba72a88d5f16a7feba312574ad50556b5","modified":1456328980000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1456328980000},{"_id":"themes/hueman/source/css/images/thumb-default.png","shasum":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","shasum":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","shasum":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1456328980000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1456328980000},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456328980000},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","shasum":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1456328980000},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","shasum":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1456328980000},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","shasum":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1456328980000},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","shasum":"942addaec4d3a60af33947a84a3d85f926015947","modified":1456328980000},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","shasum":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1456328980000},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","shasum":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","shasum":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1456328980000},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","shasum":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","shasum":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","shasum":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","shasum":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","shasum":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1456328980000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","shasum":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1456328980000},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1456328980000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1456328980000}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2016-02-25T04:45:18.000Z","_content":"\n用热血给自己树起一个高远的目标------不仅是为了争取一种光荣，更是为了追求一种境界。目标实现了，便是光荣；目标实现不了，人生也会因这一路风雨跋涉变得丰富而充实；在我看来，这就是不虚此生。","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-02-25 12:45:18\n---\n\n用热血给自己树起一个高远的目标------不仅是为了争取一种光荣，更是为了追求一种境界。目标实现了，便是光荣；目标实现不了，人生也会因这一路风雨跋涉变得丰富而充实；在我看来，这就是不虚此生。","updated":"2016-02-25T07:07:27.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cilaa99hb0001ymzddcaywudy"}],"Post":[{"title":"Hexo + Github搭建自己的博客","date":"2016-02-24T16:14:52.000Z","_content":"\n之前试过wordpress，博客园等，都觉得不是很爽\n1. wordpress.com国内被墙，wordpress.org又需要自己部署\n2. 博客园个人感觉又比较丑。。。。\n3. 其次基于程序猿喜欢折腾的本性，hexo + github感觉更高大上一些，\n   其次可以方便的在github上放一些自己的代码，作为以后做项目的一些参考。\n\n### 前期准备\n1. 安装git client\n    {% codeblock %}brew install git{% endcodeblock %}\n2. 创建Gihub账号(username), 并且创建username.github.io的仓库\n3. 安装NodeJS, npm\n    {% codeblock %}brew install nodejs{% endcodeblock %}\n4. 安装hexo\n    {% codeblock %}npm install -g hexo{% endcodeblock %}\n5. 安装hexo-deployer-git，用于deploy自己的博客到github上\n    {% codeblock %}npm install hexo-deployer-git --save{% endcodeblock %}\n\n### 下面就可以利用hexo创建自己的博客了\n1. 首先使用下面的命令初始化一个example的站点\n    {% codeblock %}hexo init username.github.io{% endcodeblock %}\n2. 修改_config.yml文件的deployment配置，改成：\n    {% codeblock %} \n  \t  deploy:\n        type: git\n        repository: git@github.com:username/username.github.io.git\n        branch: master\n    {% endcodeblock %} \n3. 然后就可以在本地预览博客了: \n    {% codeblock %}\n    npm install\n    hexo server\n    {% endcodeblock %}\n4. 可以http://localhost:4000/ 中打开了\n\n### 装扮自己的博客\n网上有很多炫酷的主题：https://hexo.io/themes/， 这里我们选择一个hueman作为例子\n    详细的参考https://github.com/ppoffice/hexo-theme-hueman/wiki\n1. 在博客工作根目录下执行如下命令:\n\t{% codeblock %} git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman{% endcodeblock %}\n2. 编辑_config.yml配置文件，修改theme\n    theme: hueman\n3. 配置theme/hueman中的配置文件，简单的可以重名_config.yml.example为_config.yml\n    {% codeblock %}mv ./themes/hueman/_config.yml.example ./themes/hueman/_config.yml{% endcodeblock %}\n4. 然后再次用hexo server命令预览自己的博客，主题变了，cool\n\n### 发布博客到github\n经过上面的准备工作，发布博客只需在工作根目录执行下面的命令\n   {% codeblock %}\n       hexo clean generate\n       hexo deploy\n   {% endcodeblock %}\n然后就可以打开: http://username.github.io 来看自己的博客了。\n","source":"_posts/Hexo + Github搭建自己的博客.md","raw":"---\ntitle: Hexo + Github搭建自己的博客\ndate: 2016-02-25 00:14:52\ntags:\n---\n\n之前试过wordpress，博客园等，都觉得不是很爽\n1. wordpress.com国内被墙，wordpress.org又需要自己部署\n2. 博客园个人感觉又比较丑。。。。\n3. 其次基于程序猿喜欢折腾的本性，hexo + github感觉更高大上一些，\n   其次可以方便的在github上放一些自己的代码，作为以后做项目的一些参考。\n\n### 前期准备\n1. 安装git client\n    {% codeblock %}brew install git{% endcodeblock %}\n2. 创建Gihub账号(username), 并且创建username.github.io的仓库\n3. 安装NodeJS, npm\n    {% codeblock %}brew install nodejs{% endcodeblock %}\n4. 安装hexo\n    {% codeblock %}npm install -g hexo{% endcodeblock %}\n5. 安装hexo-deployer-git，用于deploy自己的博客到github上\n    {% codeblock %}npm install hexo-deployer-git --save{% endcodeblock %}\n\n### 下面就可以利用hexo创建自己的博客了\n1. 首先使用下面的命令初始化一个example的站点\n    {% codeblock %}hexo init username.github.io{% endcodeblock %}\n2. 修改_config.yml文件的deployment配置，改成：\n    {% codeblock %} \n  \t  deploy:\n        type: git\n        repository: git@github.com:username/username.github.io.git\n        branch: master\n    {% endcodeblock %} \n3. 然后就可以在本地预览博客了: \n    {% codeblock %}\n    npm install\n    hexo server\n    {% endcodeblock %}\n4. 可以http://localhost:4000/ 中打开了\n\n### 装扮自己的博客\n网上有很多炫酷的主题：https://hexo.io/themes/， 这里我们选择一个hueman作为例子\n    详细的参考https://github.com/ppoffice/hexo-theme-hueman/wiki\n1. 在博客工作根目录下执行如下命令:\n\t{% codeblock %} git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman{% endcodeblock %}\n2. 编辑_config.yml配置文件，修改theme\n    theme: hueman\n3. 配置theme/hueman中的配置文件，简单的可以重名_config.yml.example为_config.yml\n    {% codeblock %}mv ./themes/hueman/_config.yml.example ./themes/hueman/_config.yml{% endcodeblock %}\n4. 然后再次用hexo server命令预览自己的博客，主题变了，cool\n\n### 发布博客到github\n经过上面的准备工作，发布博客只需在工作根目录执行下面的命令\n   {% codeblock %}\n       hexo clean generate\n       hexo deploy\n   {% endcodeblock %}\n然后就可以打开: http://username.github.io 来看自己的博客了。\n","slug":"Hexo + Github搭建自己的博客","published":1,"updated":"2016-02-26T05:43:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99gk0000ymzdecd2f5sc"},{"title":"别把自己当个超人","date":"2016-02-29T07:28:56.000Z","_content":"\n----给初级程序员的一点小小建议\n----原文地址：http://www.ituring.com.cn/article/62907\n\n有一天我和朋友Simone一起喝咖啡，期间我们聊起一些工作上的事情。我们俩都管理着一些员工，为了说明给初级职员分派任务时出现的问题，她打了一个绝妙的比方。\n\n这就像你让他们挂一幅画，但他们从来没有干过这样的活。你明白你要做什么——只要让他们这么做就行了。事实上，你认为有些东西不用解释，因为它们太简单了。所以，当一些新手为你工作时，你说，“把这幅画挂在那里，做完了告诉我”，很好理解，对不对？但他知道应该怎样钉钉子吗？实际上，有很多细节他不清楚，他需要学习才能把画挂好。另外，还有很多事情是你容易忽略的。\n\n首先，是怎么做。他需要什么工具？你知道工具箱里有锤子和钉子。但他不知道，他认为他有合适的工具完成任务。于是他在办公桌上找到了一个订书机和胶带座。\n\n现在他有两种方法完成任务。他可以做很多小的胶带圈，这样两面都能粘，然后把它们贴在画的背面。这种方法看上去可能没事，而只有画掉下来的时候，你才知道他做错了。另一种方法是，他把一大条胶带缠在画上，并且把它用订书机牢牢钉在墙上。用这种方法的结果可能更糟，虽然和你的要求差不多——画挂好了，但是画面被遮住了。只要有足够的订书钉，画就能挂住。但是这样太难看了，而且也不是你想要的挂法。如果你不及时制止他，他可能会继续用这种方法挂画。\n\n还有一种可能的情况，特别是对那种急性子的初级程序员来说。当你的老板来问你射钉枪的采购订单时，你才发现他这样做了。于是你叫来你的下属了解情况，发现他上周一直在google上搜索，阅读参考书，并向讨论组求助。他知道你想把画挂在墙上的钉子上，并且认为钉钉子的工具是高级气动射钉枪。如果他能接受你的意见，你得指出挂图和装修用的钉子是不一样的，并且告诉他工具箱里的锤子才是真正适合做这件事的工具。要是他还固执己见，就可能会有像下面这样的争吵了：\n\n“为什么不能买射钉枪？”\n\n“因为没有足够预算。”\n\n“难道就没法做好一件事情吗？”\n\n“你可以用锤子钉钉子。”\n\n“可是我们不是应该更快更好地完成工作吗？难道我们用锤子的原因只是因为用习惯了它？眼光应该放远点。”\n\n“我们没有足够的时间证明买射钉枪是对的。明白吗？”\n\n最后双方不欢而散。\n\n现在，你觉得你把工具的问题说得够清楚了。他也拿到了锤子和钉子，开始了他的工作。问题是，他还应该知道如何有效地使用它们。对你来说，熟练使用锤子是轻而易举的事情。我们会用手拿着钉子，然后大力钉下去。但对于从未见过锤子的人来说，好像用比较大且平的侧面来敲一些小东西更简单。当然，用锤柄末端也行。用楔形部分夹住钉子，然后把它钉进墙里看起来也可以。\n\n从木工的角度看，这似乎有点低级，但它反映了使用软件工具时的实际问题。一个软件往往提供很多参考文档，但范例和习惯用法却不多。你可以买一本一千多页的参考书，它告诉你用一个软件可以做些什么，却没有用哪怕仅仅5页内容，来说明实际情况下该怎么用它。就算你有一个实例，它们也不告诉你为什么要用这种方式运行。读完本文之后，你就不会再纠结钉钉子是用锤子还是射钉枪了。\n\n我刚开始使用XML时就遇到了这种情况。我读过的帮助文档里这样说，“用SAX解析器读取XML文件，不要用DOM解析器。DOM解析器运行速度很慢，并且占用内存过多”。后来我问过其他人，“为什么不行呢？难道DOM解析器执行效果很差吗？”\n\n他说:“并非如此，但如果你只想获得作者和标题信息，就没必要加载一个10M的文件。”\n\n“啊，是这样，我想把一个20K的文件内容发布为一个网页。”\n\n“那你还是用DOM解析器吧。”\n\n此外，还可能会出现数据交互问题。现在你的下属知道怎么钉钉子了，他做的第一件事情是在画框上钉一个钉子。\n\n天哪！！！\n\n“不不不，你没看到画框背后的绳子吗？你应该把钉子钉在墙上，然后把绳子挂上去。”\n\n“哦，我不知道它有什么作用。不过你只钉一个钉子？多钉几个不是更安全吗？比方说钉6个。”\n\n“用一个就足够了，钉子多了反而不好调整。”\n\n“为什么要调整呢？”\n\n“你得把画挂正吧。”\n\n“哦？要挂正吗？”\n\n唉，又没说清楚。\n\n现在我们开始讨论更高层次的设计问题。画应该挂在哪里？应该挂多高？他没法决定。如上文所说，它没有你想得那么简单。\n\n你明白画不能挂在门边，因为开门时会挡住它。它也不能挂在那边，因为你要把新书柜放在那。或许你的天花板有14英尺高，画只是用来让这个大房间显得不那么空荡。也有可能这是你和“猫王”的合影，有人坐在办公桌前的时候，你可以显摆显摆。如果它是一张老照片，你必须确保它不会受阳光直射。这些都是“业务规则”。虽然你挂画的方式大同小异，但你必须考虑它们。\n\n也有些业务规则会影响你的决策。如果画比较贵重，你得想办法把它保护好，比方说把它挂在比较难够着的地方。如果它价值连城，你得用两英寸厚的玻璃来保证它的安全，周围还得装上警报系统。要是你打算用来挂画的那堵墙非常结实，你得用钻头才行。如果墙本身比较值钱，你还是暂时打消挂画的想法吧。\n\n这些规则可能有些道理，但它们并非那么显而易见。在某种情况下正确的方案，在其它情况下不一定是对的。你只能根据挂画的经验来了解它们。另外，你还得考虑哪些规则可能改变。确定要把画挂在这吗？这幅画会被移到别处吗？它会不会被换成另外一幅画？新的画和原来那幅还是一样大吗？\n\n别指望新手会考虑这些，你可以适当指点他一下。你的任务是尽可能多地告诉他工作的细节。如果他聪明、好奇，他会提问，并了解这样做的来龙去脉。不过这需要时间。\n\n如果你没有给他足够的信息，他会试着猜测。前面提到的急性子程序员这时可能就不顾规则了。你告诉他，把你的宠物狗照片挂起来，一周后他回来了，问你要不要再考虑考虑他关于石膏锯的建议。\n\n“你为什么会想到石膏锯呢？”\n\n“办公室的工具箱里只有木锯，不太适合锯石膏板。”\n\n“什么？你认为只有你想锯石膏板吗？你可以在Home Depot上买一个锯子。”\n\n“那么，好吧，我去买一把。”\n\n“等等，你怎么会想到锯石膏板？”\n\n“是这样，我不知道挂画最好的方式是什么，所以我上网找了讨论组里的画廊设计师。他们说，最好的方法是锯穿墙壁，做出一个框架。把画从后面放进去，这样能够保证玻璃的安全，因为你不必动它。而且这种方法比钉钉子更加美观。”\n\n“…”\n\n这个比喻可能有些不太切题，不过请相信我，它非常有参考价值。如果你的职业生涯中还没有遇到此类事情，你可以先看看它。\n\n关键是，从细节技术层面到整体效果层面，有很多东西你必须知道。不能让一个新手随意猜测，不管他有多聪明。而且这和聪不聪明没关系，一切都要根据实际情况决定。可能你和他们一起工作太久了，你忘了你也有一段时间不知道这些。但是你必须详细地描述你的要求，方便他们提问。\n\n仅仅是这样吗？\n\n这让我想起了《帝国反击战》中我最喜欢的场景之一：Luke Skywalker遭受了失去亲人的打击，他一直在寻找自己隐秘的身世。后来他跟随绝地大师Yoda学习如何成为绝地武士。但是Luke想学的东西Yoda却没有教他。实际上，观众们认为，Luke 似乎并不了解绝地武士应该是怎样的，毕竟除了和Ben Knobi一起学习的时间，他几乎没有任何这方面的经验。而他之前并不知道Kenobi是绝地武士，直到他亲眼目睹Kenobi在战斗中牺牲。\n\n这是这个场景中令我印象最深的画面：\n\nLUKE：师父，移动石头很难，它和我以前学的完全不一样。\n\nYODA：不，没有什么不同。只是你认为它们不同罢了。你必须忘掉你所学的。\n\nLUKE：（静静地集中精神）好吧，我试试看。\n\nYODA：不，别老想着只“试试”。要么做，要么就别做。\n\n而《帝国反击战》和上文挂画的例子有什么联系呢？\n\n初级程序员们应该“忘掉”他们觉得自己已经知道的东西，然后重新学习他们需要的东西。\n\n刚走出校园的程序员有两种类型：要么干劲十足，随时准备改变世界；要么胆小如鼠，不敢抓住机会或者尝试有风险的东西，生怕被炒鱿鱼。\n\n第一种是我非常担心的一种。他们自认为知道要做什么，且在google和互联网上搜索他们需要的资料，他们会为了挂画把墙锯开，或者会因为射钉枪和你争吵，因为他们觉得那是对的：射钉枪钉钉子的效率更高。实际上他们错了，因为射钉枪没法控制钉钉子的力量（它会把钉子整个钉进墙里），并不适合挂画。\n\n另外一种就比较不幸了，他们没法被用人单位接纳。因为缺乏工作的主动性，没法真正学到什么东西，只能做简单的拼写检查或是类似于行政助理的工作，甚至可能一辈子都耗在HTML网页上。他们会抱怨、厌倦这份工作，最后跳槽到邮政、市场销售行业（也许更糟，做个推销员）。不管怎样，这对他们没有好处。\n\n这不得不让我深思：初级程序员应该做些什么呢？如何让一个程序员从入门到精通？初级开发人员应该怎样避免向这两个极端发展呢？\n\n结论就是：初级程序员们必须学会“问”。问了，就必定会有收获。\n\n看看急性子的初级程序员的例子：如果他敢于发问，“老板，我从来没挂过画，我该怎么做？”，就不会有射钉枪、胶带、石膏锯这样的问题了。作为一个过来人，你应该知道他没有你那么经验丰富。\n\n老手们没法了解新手们不会什么，但是帮助他们认识到“哪些不会”是非常重要的。这种关系就好比之前提到的绝地大师和绝地学徒之间的关系，也可以说是西斯领主和西斯学徒的关系，或者是千百年来人类历史上的各种师徒关系。\n\n最关键的一点呢？\n\n从某个角度来说，我们都是初级程序员。就算你有四十年各个平台和嵌入式系统的C++开发经验，但当涉及关系数据库、Nosql或是Java和JVM，或是C#和CLR的时候，你依然是一个初级程序员。就像涉及原力，或者如何像父亲一样成为绝地武士并拯救宇宙的时候（包括两集之后才发现那个漂亮女孩是你妹妹），你也依然是个新手。\n\n现在你知道该怎么做了。\n\n为你自己找一位老师（也许现在更准确的说法是“导师”），向他们学习或提问是非常有用的。然后，让你的同事或是朋友中的初级程序员也这么做。他们不一定会接受你的建议，但仔细想想，你在这个年纪的时候，不也希望有一位大师来教你吗？\n\n你是想成为爱抱怨的Luke Skywalker，还是想成为绝地武士 Luke Skywalker呢？Luke失去了一只手之后才明白Yoda远远比他聪明，应该多请教他，而不是告诉他“你做错了”。\n\n你还想败掉多少项目呢？还是老老实实承认自己不是无所不能吧。","source":"_posts/别把自己当个超人.md","raw":"---\ntitle: 别把自己当个超人\ndate: 2016-02-29 15:28:56\ntags: 杂\n---\n\n----给初级程序员的一点小小建议\n----原文地址：http://www.ituring.com.cn/article/62907\n\n有一天我和朋友Simone一起喝咖啡，期间我们聊起一些工作上的事情。我们俩都管理着一些员工，为了说明给初级职员分派任务时出现的问题，她打了一个绝妙的比方。\n\n这就像你让他们挂一幅画，但他们从来没有干过这样的活。你明白你要做什么——只要让他们这么做就行了。事实上，你认为有些东西不用解释，因为它们太简单了。所以，当一些新手为你工作时，你说，“把这幅画挂在那里，做完了告诉我”，很好理解，对不对？但他知道应该怎样钉钉子吗？实际上，有很多细节他不清楚，他需要学习才能把画挂好。另外，还有很多事情是你容易忽略的。\n\n首先，是怎么做。他需要什么工具？你知道工具箱里有锤子和钉子。但他不知道，他认为他有合适的工具完成任务。于是他在办公桌上找到了一个订书机和胶带座。\n\n现在他有两种方法完成任务。他可以做很多小的胶带圈，这样两面都能粘，然后把它们贴在画的背面。这种方法看上去可能没事，而只有画掉下来的时候，你才知道他做错了。另一种方法是，他把一大条胶带缠在画上，并且把它用订书机牢牢钉在墙上。用这种方法的结果可能更糟，虽然和你的要求差不多——画挂好了，但是画面被遮住了。只要有足够的订书钉，画就能挂住。但是这样太难看了，而且也不是你想要的挂法。如果你不及时制止他，他可能会继续用这种方法挂画。\n\n还有一种可能的情况，特别是对那种急性子的初级程序员来说。当你的老板来问你射钉枪的采购订单时，你才发现他这样做了。于是你叫来你的下属了解情况，发现他上周一直在google上搜索，阅读参考书，并向讨论组求助。他知道你想把画挂在墙上的钉子上，并且认为钉钉子的工具是高级气动射钉枪。如果他能接受你的意见，你得指出挂图和装修用的钉子是不一样的，并且告诉他工具箱里的锤子才是真正适合做这件事的工具。要是他还固执己见，就可能会有像下面这样的争吵了：\n\n“为什么不能买射钉枪？”\n\n“因为没有足够预算。”\n\n“难道就没法做好一件事情吗？”\n\n“你可以用锤子钉钉子。”\n\n“可是我们不是应该更快更好地完成工作吗？难道我们用锤子的原因只是因为用习惯了它？眼光应该放远点。”\n\n“我们没有足够的时间证明买射钉枪是对的。明白吗？”\n\n最后双方不欢而散。\n\n现在，你觉得你把工具的问题说得够清楚了。他也拿到了锤子和钉子，开始了他的工作。问题是，他还应该知道如何有效地使用它们。对你来说，熟练使用锤子是轻而易举的事情。我们会用手拿着钉子，然后大力钉下去。但对于从未见过锤子的人来说，好像用比较大且平的侧面来敲一些小东西更简单。当然，用锤柄末端也行。用楔形部分夹住钉子，然后把它钉进墙里看起来也可以。\n\n从木工的角度看，这似乎有点低级，但它反映了使用软件工具时的实际问题。一个软件往往提供很多参考文档，但范例和习惯用法却不多。你可以买一本一千多页的参考书，它告诉你用一个软件可以做些什么，却没有用哪怕仅仅5页内容，来说明实际情况下该怎么用它。就算你有一个实例，它们也不告诉你为什么要用这种方式运行。读完本文之后，你就不会再纠结钉钉子是用锤子还是射钉枪了。\n\n我刚开始使用XML时就遇到了这种情况。我读过的帮助文档里这样说，“用SAX解析器读取XML文件，不要用DOM解析器。DOM解析器运行速度很慢，并且占用内存过多”。后来我问过其他人，“为什么不行呢？难道DOM解析器执行效果很差吗？”\n\n他说:“并非如此，但如果你只想获得作者和标题信息，就没必要加载一个10M的文件。”\n\n“啊，是这样，我想把一个20K的文件内容发布为一个网页。”\n\n“那你还是用DOM解析器吧。”\n\n此外，还可能会出现数据交互问题。现在你的下属知道怎么钉钉子了，他做的第一件事情是在画框上钉一个钉子。\n\n天哪！！！\n\n“不不不，你没看到画框背后的绳子吗？你应该把钉子钉在墙上，然后把绳子挂上去。”\n\n“哦，我不知道它有什么作用。不过你只钉一个钉子？多钉几个不是更安全吗？比方说钉6个。”\n\n“用一个就足够了，钉子多了反而不好调整。”\n\n“为什么要调整呢？”\n\n“你得把画挂正吧。”\n\n“哦？要挂正吗？”\n\n唉，又没说清楚。\n\n现在我们开始讨论更高层次的设计问题。画应该挂在哪里？应该挂多高？他没法决定。如上文所说，它没有你想得那么简单。\n\n你明白画不能挂在门边，因为开门时会挡住它。它也不能挂在那边，因为你要把新书柜放在那。或许你的天花板有14英尺高，画只是用来让这个大房间显得不那么空荡。也有可能这是你和“猫王”的合影，有人坐在办公桌前的时候，你可以显摆显摆。如果它是一张老照片，你必须确保它不会受阳光直射。这些都是“业务规则”。虽然你挂画的方式大同小异，但你必须考虑它们。\n\n也有些业务规则会影响你的决策。如果画比较贵重，你得想办法把它保护好，比方说把它挂在比较难够着的地方。如果它价值连城，你得用两英寸厚的玻璃来保证它的安全，周围还得装上警报系统。要是你打算用来挂画的那堵墙非常结实，你得用钻头才行。如果墙本身比较值钱，你还是暂时打消挂画的想法吧。\n\n这些规则可能有些道理，但它们并非那么显而易见。在某种情况下正确的方案，在其它情况下不一定是对的。你只能根据挂画的经验来了解它们。另外，你还得考虑哪些规则可能改变。确定要把画挂在这吗？这幅画会被移到别处吗？它会不会被换成另外一幅画？新的画和原来那幅还是一样大吗？\n\n别指望新手会考虑这些，你可以适当指点他一下。你的任务是尽可能多地告诉他工作的细节。如果他聪明、好奇，他会提问，并了解这样做的来龙去脉。不过这需要时间。\n\n如果你没有给他足够的信息，他会试着猜测。前面提到的急性子程序员这时可能就不顾规则了。你告诉他，把你的宠物狗照片挂起来，一周后他回来了，问你要不要再考虑考虑他关于石膏锯的建议。\n\n“你为什么会想到石膏锯呢？”\n\n“办公室的工具箱里只有木锯，不太适合锯石膏板。”\n\n“什么？你认为只有你想锯石膏板吗？你可以在Home Depot上买一个锯子。”\n\n“那么，好吧，我去买一把。”\n\n“等等，你怎么会想到锯石膏板？”\n\n“是这样，我不知道挂画最好的方式是什么，所以我上网找了讨论组里的画廊设计师。他们说，最好的方法是锯穿墙壁，做出一个框架。把画从后面放进去，这样能够保证玻璃的安全，因为你不必动它。而且这种方法比钉钉子更加美观。”\n\n“…”\n\n这个比喻可能有些不太切题，不过请相信我，它非常有参考价值。如果你的职业生涯中还没有遇到此类事情，你可以先看看它。\n\n关键是，从细节技术层面到整体效果层面，有很多东西你必须知道。不能让一个新手随意猜测，不管他有多聪明。而且这和聪不聪明没关系，一切都要根据实际情况决定。可能你和他们一起工作太久了，你忘了你也有一段时间不知道这些。但是你必须详细地描述你的要求，方便他们提问。\n\n仅仅是这样吗？\n\n这让我想起了《帝国反击战》中我最喜欢的场景之一：Luke Skywalker遭受了失去亲人的打击，他一直在寻找自己隐秘的身世。后来他跟随绝地大师Yoda学习如何成为绝地武士。但是Luke想学的东西Yoda却没有教他。实际上，观众们认为，Luke 似乎并不了解绝地武士应该是怎样的，毕竟除了和Ben Knobi一起学习的时间，他几乎没有任何这方面的经验。而他之前并不知道Kenobi是绝地武士，直到他亲眼目睹Kenobi在战斗中牺牲。\n\n这是这个场景中令我印象最深的画面：\n\nLUKE：师父，移动石头很难，它和我以前学的完全不一样。\n\nYODA：不，没有什么不同。只是你认为它们不同罢了。你必须忘掉你所学的。\n\nLUKE：（静静地集中精神）好吧，我试试看。\n\nYODA：不，别老想着只“试试”。要么做，要么就别做。\n\n而《帝国反击战》和上文挂画的例子有什么联系呢？\n\n初级程序员们应该“忘掉”他们觉得自己已经知道的东西，然后重新学习他们需要的东西。\n\n刚走出校园的程序员有两种类型：要么干劲十足，随时准备改变世界；要么胆小如鼠，不敢抓住机会或者尝试有风险的东西，生怕被炒鱿鱼。\n\n第一种是我非常担心的一种。他们自认为知道要做什么，且在google和互联网上搜索他们需要的资料，他们会为了挂画把墙锯开，或者会因为射钉枪和你争吵，因为他们觉得那是对的：射钉枪钉钉子的效率更高。实际上他们错了，因为射钉枪没法控制钉钉子的力量（它会把钉子整个钉进墙里），并不适合挂画。\n\n另外一种就比较不幸了，他们没法被用人单位接纳。因为缺乏工作的主动性，没法真正学到什么东西，只能做简单的拼写检查或是类似于行政助理的工作，甚至可能一辈子都耗在HTML网页上。他们会抱怨、厌倦这份工作，最后跳槽到邮政、市场销售行业（也许更糟，做个推销员）。不管怎样，这对他们没有好处。\n\n这不得不让我深思：初级程序员应该做些什么呢？如何让一个程序员从入门到精通？初级开发人员应该怎样避免向这两个极端发展呢？\n\n结论就是：初级程序员们必须学会“问”。问了，就必定会有收获。\n\n看看急性子的初级程序员的例子：如果他敢于发问，“老板，我从来没挂过画，我该怎么做？”，就不会有射钉枪、胶带、石膏锯这样的问题了。作为一个过来人，你应该知道他没有你那么经验丰富。\n\n老手们没法了解新手们不会什么，但是帮助他们认识到“哪些不会”是非常重要的。这种关系就好比之前提到的绝地大师和绝地学徒之间的关系，也可以说是西斯领主和西斯学徒的关系，或者是千百年来人类历史上的各种师徒关系。\n\n最关键的一点呢？\n\n从某个角度来说，我们都是初级程序员。就算你有四十年各个平台和嵌入式系统的C++开发经验，但当涉及关系数据库、Nosql或是Java和JVM，或是C#和CLR的时候，你依然是一个初级程序员。就像涉及原力，或者如何像父亲一样成为绝地武士并拯救宇宙的时候（包括两集之后才发现那个漂亮女孩是你妹妹），你也依然是个新手。\n\n现在你知道该怎么做了。\n\n为你自己找一位老师（也许现在更准确的说法是“导师”），向他们学习或提问是非常有用的。然后，让你的同事或是朋友中的初级程序员也这么做。他们不一定会接受你的建议，但仔细想想，你在这个年纪的时候，不也希望有一位大师来教你吗？\n\n你是想成为爱抱怨的Luke Skywalker，还是想成为绝地武士 Luke Skywalker呢？Luke失去了一只手之后才明白Yoda远远比他聪明，应该多请教他，而不是告诉他“你做错了”。\n\n你还想败掉多少项目呢？还是老老实实承认自己不是无所不能吧。","slug":"别把自己当个超人","published":1,"updated":"2016-02-29T07:31:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99hy0002ymzdzbzpheh4"},{"title":"使用ID3生成决策树","date":"2016-02-26T03:08:53.000Z","_content":"ID3算法是一种贪心算法，用来构造决策树。ID3算法起源于概念学习系统（CLS），以信息熵的下降速度为选取测试属性的标准，即在每个节点选取还尚未被用来划分的具有最高信息增益的属性作为划分标准，然后继续这个过程，直到生成的决策树能完美分类训练样例。\n\n优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据。\n缺点：可能会产生过度匹配问题。\n适用数据类型：数值型和标称型\n\n例如我们有如下数据:\n\n|编号|Sky|AirTemp|Humidity|Wind|Water|Forecast|EnjoySport|\n|:-|:-----:|:----:|:----:|:----:|:----:|:----:|-:|\n|1|Sunny|Warm|Normal|Strong|Warm|Same|Y|\n|2|Sunny|Warm|High|Strong|Warm|Same|Y|\n|3|Rainy|Cold|High|Strong|Warm|Same|N|\n|4|Rainy|Warm|High|Strong|warm|Change|Y|\n\n1. 如果根据Sky作为标准来分割集合，则得到的结果为：{(Sunny, Y), (Rainy, N),{Rainy, Y}}， 对这个集合计算香农熵:\n                H1= -1/3*log(1/3) - 2/3*log(2/3)= 0.6365141682948128\n2. 如果根据AirTemp来分割，则得到的集合为:{(Warm, Y), (Cold, N) },对这个集合计算香农熵：\n\t            H2= -1/2*log(1/2) - 1/2*log(1/2)= 0.6931471805599453\n3. 如果根据Forecast来分割，则得到的集合为：{(Same, Y ), (Same, N), (Change, Y) }，对这个集合计算香农熵：\n\t            H3=-1/3*log(1/3) - 2/3*log(2/3) = 0.6365141682948128\n\n以此类推，最终我们选择AirTemp来作为决策树的第一个节点，将集合分割成两个。然后递归得到的分支集合，做相同的处理。\n递归结束的条件是：程序遍历完所有划分数据集的属性，或者每个分支下的所有实例都具有相同的分类。\n\nID3算法简单且容易理解，但是会有过度匹配的问题，此时就需要一些剪枝的方法。除了ID3算法外，还有一些其他比较流行的决策树生成方法，例如C4.5和CART算法。\n\nhttp://fangdonghao1029.blog.163.com/blog/static/34364307201281352032174/\n\nhttp://blog.sina.com.cn/s/blog_8095e51d01013chj.html","source":"_posts/使用ID3生成决策树.md","raw":"---\ntitle: 使用ID3生成决策树\ndate: 2016-02-26 11:08:53\ntags: 机器学习\n---\nID3算法是一种贪心算法，用来构造决策树。ID3算法起源于概念学习系统（CLS），以信息熵的下降速度为选取测试属性的标准，即在每个节点选取还尚未被用来划分的具有最高信息增益的属性作为划分标准，然后继续这个过程，直到生成的决策树能完美分类训练样例。\n\n优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据。\n缺点：可能会产生过度匹配问题。\n适用数据类型：数值型和标称型\n\n例如我们有如下数据:\n\n|编号|Sky|AirTemp|Humidity|Wind|Water|Forecast|EnjoySport|\n|:-|:-----:|:----:|:----:|:----:|:----:|:----:|-:|\n|1|Sunny|Warm|Normal|Strong|Warm|Same|Y|\n|2|Sunny|Warm|High|Strong|Warm|Same|Y|\n|3|Rainy|Cold|High|Strong|Warm|Same|N|\n|4|Rainy|Warm|High|Strong|warm|Change|Y|\n\n1. 如果根据Sky作为标准来分割集合，则得到的结果为：{(Sunny, Y), (Rainy, N),{Rainy, Y}}， 对这个集合计算香农熵:\n                H1= -1/3*log(1/3) - 2/3*log(2/3)= 0.6365141682948128\n2. 如果根据AirTemp来分割，则得到的集合为:{(Warm, Y), (Cold, N) },对这个集合计算香农熵：\n\t            H2= -1/2*log(1/2) - 1/2*log(1/2)= 0.6931471805599453\n3. 如果根据Forecast来分割，则得到的集合为：{(Same, Y ), (Same, N), (Change, Y) }，对这个集合计算香农熵：\n\t            H3=-1/3*log(1/3) - 2/3*log(2/3) = 0.6365141682948128\n\n以此类推，最终我们选择AirTemp来作为决策树的第一个节点，将集合分割成两个。然后递归得到的分支集合，做相同的处理。\n递归结束的条件是：程序遍历完所有划分数据集的属性，或者每个分支下的所有实例都具有相同的分类。\n\nID3算法简单且容易理解，但是会有过度匹配的问题，此时就需要一些剪枝的方法。除了ID3算法外，还有一些其他比较流行的决策树生成方法，例如C4.5和CART算法。\n\nhttp://fangdonghao1029.blog.163.com/blog/static/34364307201281352032174/\n\nhttp://blog.sina.com.cn/s/blog_8095e51d01013chj.html","slug":"使用ID3生成决策树","published":1,"updated":"2016-02-26T03:28:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99i30005ymzdu3kdus7q"},{"title":"乐观锁VS悲观锁","date":"2016-02-29T05:55:34.000Z","_content":"\n锁机制解决的并发导致的数据更新问题:\n1. 更新丢失：一个事务的更新覆盖了其他事务的更新结果.\n2. 脏读：用户AB看到的值都是6，B把值改成了2，但是用户A读到的值仍为6.\n\n\n为了解决这些问题，必须引入并发控制机制，及锁。 \n1. 悲观锁：顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。\n2. 乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。\n\n两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。\n\n乐观锁的实现:\n1. 使用自增长的整数表示数据版本号。更新的时候检查版本是否一致，比如数据库中的版本是6， 更新提交时version=6+1， 使用7与数据库version+1=7进行比较，如果相等，则可以更新，如果不等则有可能其他程序已更新了该记录，返回错误。\n2. 使用时间戳来实现。更新时用自己拿到的时间戳和数据库中的时间戳比较，相等则更新成功并同时更新数据库中的时间戳，否则返回错误。\n\nMySQL InnerDB的事务隔离级别:\n事务的ACID特性：原子性、一致性、隔离性、持久性。这部分不多说了，任何一本讲数据库理论的书籍里边都会有讲。MySQL InnoDB通过锁来实现事务的一致性和隔离性，共实现了四种事务隔离级别：\n1. READ UNCOMMITTED：某个session中的事务可以看到其他session的事务中尚未提交的更改，而该更改可能回滚，也即会出现”脏读“；\n2. READ COMMITTED：某个session中的事务只可以看到其他session的事务中已经提交的更改，不会出现”脏读“， 但一个事务对同一对象的两次查询结果可能出现不一致，也即会出现“不可重复读”；\n3. REPEATABLE READ：某个session中的事务不能查询到其他session的事务中未提交和已经提交的更改，不会出现”不可重复读”，但期间，其他事务却可能对数据进行更改并提交，而这些更改对前一个事务中的INSERT/UPDATE/DELETE等语句是可见的，因此可能出现”更新丢失“，另外，虽然SELECT不到，但对其进行更改操作时却真实的存在，就好像幻象一样，且更改过后可以被同一事物中的SELECT看到，也即”幻像读“（其实”不可重复读”也可理解为”幻像读“，因为同一事务中前后两次读取到的结果不一样，看个人怎么理解了，这些叫法只是一个名字而已）；\n4. SERIALIZABLE：使事务串行化执行，解决上述问题。所有的读操作均为当前读，读加读锁 (S锁)，写加写锁 (X锁)Serializable隔离级别下，读写冲突，因此并发度急剧下降，在MySQL/InnoDB下不建议使用。\n\n总而言之: 同一记录上的更新/删除需要串行执行的约束。\n\nhttp://www.cnblogs.com/zhaoyl/p/4121010.html","source":"_posts/乐观锁VS悲观锁.md","raw":"---\ntitle: 乐观锁VS悲观锁\ndate: 2016-02-29 13:55:34\ntags: 数据库\n---\n\n锁机制解决的并发导致的数据更新问题:\n1. 更新丢失：一个事务的更新覆盖了其他事务的更新结果.\n2. 脏读：用户AB看到的值都是6，B把值改成了2，但是用户A读到的值仍为6.\n\n\n为了解决这些问题，必须引入并发控制机制，及锁。 \n1. 悲观锁：顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。\n2. 乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。\n\n两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。\n\n乐观锁的实现:\n1. 使用自增长的整数表示数据版本号。更新的时候检查版本是否一致，比如数据库中的版本是6， 更新提交时version=6+1， 使用7与数据库version+1=7进行比较，如果相等，则可以更新，如果不等则有可能其他程序已更新了该记录，返回错误。\n2. 使用时间戳来实现。更新时用自己拿到的时间戳和数据库中的时间戳比较，相等则更新成功并同时更新数据库中的时间戳，否则返回错误。\n\nMySQL InnerDB的事务隔离级别:\n事务的ACID特性：原子性、一致性、隔离性、持久性。这部分不多说了，任何一本讲数据库理论的书籍里边都会有讲。MySQL InnoDB通过锁来实现事务的一致性和隔离性，共实现了四种事务隔离级别：\n1. READ UNCOMMITTED：某个session中的事务可以看到其他session的事务中尚未提交的更改，而该更改可能回滚，也即会出现”脏读“；\n2. READ COMMITTED：某个session中的事务只可以看到其他session的事务中已经提交的更改，不会出现”脏读“， 但一个事务对同一对象的两次查询结果可能出现不一致，也即会出现“不可重复读”；\n3. REPEATABLE READ：某个session中的事务不能查询到其他session的事务中未提交和已经提交的更改，不会出现”不可重复读”，但期间，其他事务却可能对数据进行更改并提交，而这些更改对前一个事务中的INSERT/UPDATE/DELETE等语句是可见的，因此可能出现”更新丢失“，另外，虽然SELECT不到，但对其进行更改操作时却真实的存在，就好像幻象一样，且更改过后可以被同一事物中的SELECT看到，也即”幻像读“（其实”不可重复读”也可理解为”幻像读“，因为同一事务中前后两次读取到的结果不一样，看个人怎么理解了，这些叫法只是一个名字而已）；\n4. SERIALIZABLE：使事务串行化执行，解决上述问题。所有的读操作均为当前读，读加读锁 (S锁)，写加写锁 (X锁)Serializable隔离级别下，读写冲突，因此并发度急剧下降，在MySQL/InnoDB下不建议使用。\n\n总而言之: 同一记录上的更新/删除需要串行执行的约束。\n\nhttp://www.cnblogs.com/zhaoyl/p/4121010.html","slug":"乐观锁VS悲观锁","published":1,"updated":"2016-02-29T06:43:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99i60008ymzdwyz8usuf"},{"title":"Vector Clock","date":"2016-02-29T07:32:02.000Z","_content":"\n在一些分布式数据库中，如Dynamo，Project Voldemort，为了控制同一record的不同版本，常常会使用Vector Clock这样的概念。\n\n向量时钟(vector clock)实际上是一个(node,counter)对列表(即(节点，计数器)列表)。 矢量锁是与每个对象的每个版本相关联。通过审查其向量时钟，我们可以判断一个对象的两个版本是平行分枝或有因果顺序。如果第一个时钟对象上的计数器在第二个时钟对象上小于或等于其他所有节点的计数器，那么第一个是第二个的祖先，可以被人忽略。否则，这两个变化被认为是冲突，并要求协调。例如假设该集群有A、B、C三个node，则我们的N是3。\n \n我们先看看只写一份W=1,那么根据W+R>N有R=3。那么就有如下场景：\n\n1. 首先A将数据修改为4000。我们有了4000[A:1];\n2. 在数据被复制到B，C之前，A又把数据变成了4500.那么A上就有了4500[A:2],它覆盖了之前的[A:1]\n3. 随后这个数据被传到了B，C。那么B，C上也有了4500[A:2].\n4. 此时，B把数据修改为5000，那么B上就有了5000[A:2,B:1]\n5. 在B上的数据被复制到A，C之前，C又把数据该成了3000\n\n经过上面这么一番折腾，C上有了3000[A:2,C:1],此时A上是4500[A:2]，B上则是5000[A:2,B:1]。\n\n三个node上数据全不一致！！！那如果这个时候有个D想查这条数据怎么办？看看vectorclock这时能起到什么作用？\n\n由于我们的R=3,所以这三个节点上的数据都会被读到，那么4500、5000和3000哪个被返回呢？显而易见，A上的版本最低，应被舍弃，那么B和C呢？\n\nD拿到3000[A:2,C:1]和5000[A:2,B:1]确实有点手足无措，但我们可以让它有个判断依据——比如时间戳——现在客户端看到B上的数据是最新的，那么结论就是5000.\n\n既然已经有了结论，那就不能让之后的客户端再这么纠结，接下来就是要统一各个节点，合并vectorclock。这时候要做的事情就是通知A，现在数据是5000以及得到5000这个值所基于的vector clock。这样A上的数据就变成了5000[A:3,C:1, B:1]. 这样，再有读请求的话，我们可以毫不犹豫的选择A上的数据。\n \n我们看看如果W=2,R=2的情况：\n\n1. A收到4000，但是只有这个数据也到达B，才算成功。所以我们有了A上的4000[A:1]和B上的4000[A:1]\n2. 在被复制到C之前，A把数据库改成了4500. 同上A和B上都会有4500[A:2]\n3. 数据被复制到C，C上也有了4500[A:2]\n4. 此时，B需要更新数据位5000，那么B上就有了5000[A:2,B:1]同1理，C上有了5000[A:2,B:1]\n5. 然后C又需要更新数据到3000！那么C上应该有3000[A:2,B:1,C:1].同1理，新数据的写也会到达A,A上的4500[A:2]看到3000[A:2,B:1,C:1]后，无条件接受被覆盖，因此也变成了3000[A:2,B:1,C:1]。\n\n经过上面这么一番折腾，C上有了3000[A:2,B:1,C:1],此时A上是3000[A:2,B:1,C:1]，B上则是5000[A:2,B:1]。这时D读取该数据库就不用纠结了。因为R=2，无论我们读哪两个，都将得到5000这个价格。\n \n由此我们也可以看出提高W可以降低冲突，提高一致性。但代价也是显然的：写两份显然比写一份要慢，并且同时能写成功的概率也变低了——也就是Availability降低。\n\n","source":"_posts/Vector-Clock.md","raw":"---\ntitle: Vector Clock\ndate: 2016-02-29 15:32:02\ntags: 分布式\n---\n\n在一些分布式数据库中，如Dynamo，Project Voldemort，为了控制同一record的不同版本，常常会使用Vector Clock这样的概念。\n\n向量时钟(vector clock)实际上是一个(node,counter)对列表(即(节点，计数器)列表)。 矢量锁是与每个对象的每个版本相关联。通过审查其向量时钟，我们可以判断一个对象的两个版本是平行分枝或有因果顺序。如果第一个时钟对象上的计数器在第二个时钟对象上小于或等于其他所有节点的计数器，那么第一个是第二个的祖先，可以被人忽略。否则，这两个变化被认为是冲突，并要求协调。例如假设该集群有A、B、C三个node，则我们的N是3。\n \n我们先看看只写一份W=1,那么根据W+R>N有R=3。那么就有如下场景：\n\n1. 首先A将数据修改为4000。我们有了4000[A:1];\n2. 在数据被复制到B，C之前，A又把数据变成了4500.那么A上就有了4500[A:2],它覆盖了之前的[A:1]\n3. 随后这个数据被传到了B，C。那么B，C上也有了4500[A:2].\n4. 此时，B把数据修改为5000，那么B上就有了5000[A:2,B:1]\n5. 在B上的数据被复制到A，C之前，C又把数据该成了3000\n\n经过上面这么一番折腾，C上有了3000[A:2,C:1],此时A上是4500[A:2]，B上则是5000[A:2,B:1]。\n\n三个node上数据全不一致！！！那如果这个时候有个D想查这条数据怎么办？看看vectorclock这时能起到什么作用？\n\n由于我们的R=3,所以这三个节点上的数据都会被读到，那么4500、5000和3000哪个被返回呢？显而易见，A上的版本最低，应被舍弃，那么B和C呢？\n\nD拿到3000[A:2,C:1]和5000[A:2,B:1]确实有点手足无措，但我们可以让它有个判断依据——比如时间戳——现在客户端看到B上的数据是最新的，那么结论就是5000.\n\n既然已经有了结论，那就不能让之后的客户端再这么纠结，接下来就是要统一各个节点，合并vectorclock。这时候要做的事情就是通知A，现在数据是5000以及得到5000这个值所基于的vector clock。这样A上的数据就变成了5000[A:3,C:1, B:1]. 这样，再有读请求的话，我们可以毫不犹豫的选择A上的数据。\n \n我们看看如果W=2,R=2的情况：\n\n1. A收到4000，但是只有这个数据也到达B，才算成功。所以我们有了A上的4000[A:1]和B上的4000[A:1]\n2. 在被复制到C之前，A把数据库改成了4500. 同上A和B上都会有4500[A:2]\n3. 数据被复制到C，C上也有了4500[A:2]\n4. 此时，B需要更新数据位5000，那么B上就有了5000[A:2,B:1]同1理，C上有了5000[A:2,B:1]\n5. 然后C又需要更新数据到3000！那么C上应该有3000[A:2,B:1,C:1].同1理，新数据的写也会到达A,A上的4500[A:2]看到3000[A:2,B:1,C:1]后，无条件接受被覆盖，因此也变成了3000[A:2,B:1,C:1]。\n\n经过上面这么一番折腾，C上有了3000[A:2,B:1,C:1],此时A上是3000[A:2,B:1,C:1]，B上则是5000[A:2,B:1]。这时D读取该数据库就不用纠结了。因为R=2，无论我们读哪两个，都将得到5000这个价格。\n \n由此我们也可以看出提高W可以降低冲突，提高一致性。但代价也是显然的：写两份显然比写一份要慢，并且同时能写成功的概率也变低了——也就是Availability降低。\n\n","slug":"Vector-Clock","published":1,"updated":"2016-02-29T07:52:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99i8000bymzdzno61t16"},{"title":"Storm安装配置","date":"2016-03-02T03:27:46.000Z","_content":"我们使用3台机器搭建Storm集群:\n```java\n192.168.4.142   h1\n192.168.4.143   h2\n192.168.4.144   h3\n```\n首先要保证zookeeper集群正常运行，假设zk也同样部署在h1, h2, h3机器上，端口为为默认的2181。\n然后，在h1节点上，执行如下命令安装：\n```java\ncd /usr/local/\nwget http://mirror.bit.edu.cn/apache/incubator/storm/apache-storm-0.9.2-incubating/apache-storm-0.9.2-incubating.tar.gz\ntar xvzf apache-storm-0.9.2-incubating.tar.gz\nln -s /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\nchown -R storm:storm /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\n```\n然后，修改配置文件conf/storm.yaml，内容如下所示：\n```java\n storm.zookeeper.servers:\n     - \"h1\"\n     - \"h2\"\n     - \"h3\"\nstorm.zookeeper.port: 2181\nnimbus.host: \"h1\"\n\nsupervisor.slots.ports:\n    - 6700\n    - 6701\n    - 6702\n    - 6703\n\nstorm.local.dir: \"/tmp/storm\"\n```\n\n将配置好的安装文件，分发到其他节点上：\n```java\nscp -r /usr/local/apache-storm-0.9.2-incubating/ h2:/usr/local/\nscp -r /usr/local/apache-storm-0.9.2-incubating/ h3:/usr/local/\n```\n最后，在h2、h3节点上配置，执行如下命令：\n```java\ncd /usr/local/\nln -s /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\nchown -R storm:storm /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\n```\n\nStorm集群的主节点为Nimbus，从节点为Supervisor，我们需要在h1上启动Nimbus服务，在从节点h2、h3上启动Supervisor服务：\n```java\nbin/storm nimbus &\nbin/storm supervisor &\n```\n\n为了方便监控，可以启动Storm UI，可以从Web页面上监控Storm Topology的运行状态，例如在h2上启动:\n```java\nbin/storm ui &\n```\n这样可以通过访问http://h2:8080/ 来查看Topology的运行状况。","source":"_posts/Storm安装配置.md","raw":"---\ntitle: Storm安装配置\ndate: 2016-03-02 11:27:46\ntags: 大数据\n---\n我们使用3台机器搭建Storm集群:\n```java\n192.168.4.142   h1\n192.168.4.143   h2\n192.168.4.144   h3\n```\n首先要保证zookeeper集群正常运行，假设zk也同样部署在h1, h2, h3机器上，端口为为默认的2181。\n然后，在h1节点上，执行如下命令安装：\n```java\ncd /usr/local/\nwget http://mirror.bit.edu.cn/apache/incubator/storm/apache-storm-0.9.2-incubating/apache-storm-0.9.2-incubating.tar.gz\ntar xvzf apache-storm-0.9.2-incubating.tar.gz\nln -s /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\nchown -R storm:storm /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\n```\n然后，修改配置文件conf/storm.yaml，内容如下所示：\n```java\n storm.zookeeper.servers:\n     - \"h1\"\n     - \"h2\"\n     - \"h3\"\nstorm.zookeeper.port: 2181\nnimbus.host: \"h1\"\n\nsupervisor.slots.ports:\n    - 6700\n    - 6701\n    - 6702\n    - 6703\n\nstorm.local.dir: \"/tmp/storm\"\n```\n\n将配置好的安装文件，分发到其他节点上：\n```java\nscp -r /usr/local/apache-storm-0.9.2-incubating/ h2:/usr/local/\nscp -r /usr/local/apache-storm-0.9.2-incubating/ h3:/usr/local/\n```\n最后，在h2、h3节点上配置，执行如下命令：\n```java\ncd /usr/local/\nln -s /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\nchown -R storm:storm /usr/local/apache-storm-0.9.2-incubating /usr/local/storm\n```\n\nStorm集群的主节点为Nimbus，从节点为Supervisor，我们需要在h1上启动Nimbus服务，在从节点h2、h3上启动Supervisor服务：\n```java\nbin/storm nimbus &\nbin/storm supervisor &\n```\n\n为了方便监控，可以启动Storm UI，可以从Web页面上监控Storm Topology的运行状态，例如在h2上启动:\n```java\nbin/storm ui &\n```\n这样可以通过访问http://h2:8080/ 来查看Topology的运行状况。","slug":"Storm安装配置","published":1,"updated":"2016-03-02T03:34:31.000Z","_id":"cilaa99ia000eymzdpt1w94l1","comments":1,"layout":"post","photos":[],"link":""},{"title":"P-Unit结合JUnit做并发性能测试","date":"2016-02-25T05:31:18.000Z","_content":"\nJUnit大家一定都很熟悉了，这里就不做多的介绍。我们重点说一下p-unit的应用。\np-unit是一款开源的测试框架，支持在多线程中跑同样的测试用例.\n比如你有如下JUnit的测试代码:\n{% codeblock lang:java%}\npublic class sampleTest {\n    @Test\n    public void test1() {\n      //some logic and assert\n    }\n    @Test\n    public void test2() {\n      // do something\n    }\n}\n{% endcodeblock %}\n\n1. 并发的跑一个unittest中的所有test cases。\n{% codeblock lang:java%}\nSoloRunner runner = new SoloRunner();\n//如果你是用JUnit 的@Test annotation, 这个是必须的。\nrunner.setConvention(new JUnitAnnotationConvention());\nrunner.run(sampleTest.class);\n{% endcodeblock %}\n\n此时test1和test2会并发执行\n2. 对一个unittest中的每个方法用多个线程去执行。\n\n{% codeblock lang:java%}\nConcurrentRunner crunner = new ConcurrentRunner(100);\ncrunner.setConvention(new JUnitAnnotationConvention());\ncrunner.run(sampleTest.class);\n{% endcodeblock %}\n\n此时分别会有100个线程并发的执行test1和test2\n\nSource code: https://svn.code.sf.net/p/p-unit/code/trunk/\n里面有源码和简单的测试代码和说明，可供参考\nhttp://www.ibm.com/developerworks/cn/java/j-lo-punit/","source":"_posts/P-Unit结合JUnit做并发性能测试.md","raw":"---\ntitle: P-Unit结合JUnit做并发性能测试\ndate: 2016-02-25 13:31:18\ntags: Java\n---\n\nJUnit大家一定都很熟悉了，这里就不做多的介绍。我们重点说一下p-unit的应用。\np-unit是一款开源的测试框架，支持在多线程中跑同样的测试用例.\n比如你有如下JUnit的测试代码:\n{% codeblock lang:java%}\npublic class sampleTest {\n    @Test\n    public void test1() {\n      //some logic and assert\n    }\n    @Test\n    public void test2() {\n      // do something\n    }\n}\n{% endcodeblock %}\n\n1. 并发的跑一个unittest中的所有test cases。\n{% codeblock lang:java%}\nSoloRunner runner = new SoloRunner();\n//如果你是用JUnit 的@Test annotation, 这个是必须的。\nrunner.setConvention(new JUnitAnnotationConvention());\nrunner.run(sampleTest.class);\n{% endcodeblock %}\n\n此时test1和test2会并发执行\n2. 对一个unittest中的每个方法用多个线程去执行。\n\n{% codeblock lang:java%}\nConcurrentRunner crunner = new ConcurrentRunner(100);\ncrunner.setConvention(new JUnitAnnotationConvention());\ncrunner.run(sampleTest.class);\n{% endcodeblock %}\n\n此时分别会有100个线程并发的执行test1和test2\n\nSource code: https://svn.code.sf.net/p/p-unit/code/trunk/\n里面有源码和简单的测试代码和说明，可供参考\nhttp://www.ibm.com/developerworks/cn/java/j-lo-punit/","slug":"P-Unit结合JUnit做并发性能测试","published":1,"updated":"2016-02-25T05:39:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99ic000fymzduw7qojlv"},{"title":"MySQL连接问题123","date":"2016-02-26T02:52:07.000Z","_content":"\n1. 首先要排查网络问题和防火墙的问题\n这个是必须的， 你要是MySQL的服务器都连不上，那还访问什么？ 怎么检查呢？\nping 192.168.0.11，如果ping 的通的话， 再去检查一下 3306端口是不是被防火墙给挡掉了，telnet 192.168.0.11 3306 或者干脆把防火墙关掉，\nservice iptables stop (Redhat) 或 ufw disable(ubuntu) 这一步没问题的话， 开始下一步。\n\n2. 要排查有没有访问权限\n说到访问权限， MySQL分配用户的时候会指定一个host, 比如我的 host指定为 192.168.0.5 , 那么这个账号就只能用 .5 这一台机器问，其他的机器用这个账号访问会提示没有权限。 host 指定为 % 则表示允许所有的机器访问。 一般来说出于安全方面的考虑，遵循最小权限原则， 权限的问题就不多讲了， 不会的自己查手册。可以使用如下命令：\n{% codeblock %}\nmysql>use mysql;\nmysql>update user set host = '%' where user ='root';\nmysql>select host, user from user;\n{% endcodeblock %}\n如果执行上述命令出现：ERROR 1062 (23000):Duplicate entry'%-root' for key 'PRIMARY' 错误，\n说明host已经有了%这个值，所以直接运行命令：\n{% codeblock %}\nmysql>flushprivileges;\n{% endcodeblock %}\n\n确定了权限没问题的话进行下一步。\n或者直接使用如下命令: grant all privileges on *.* to sa @\"%\" identified by \"12345\";为-usa -p12345用户开通所有机器的访问权限。\n\n3. 要排查MySQL的配置\n检查mysql的配置文件， Linux下MySQL的配置文件叫 my.cnf，windows下的叫 my.ini，检查这个配置项–bind-address=IP\n引用手册里的一段话：\n\t*The IP address to bind to.Only one address can be selected. If this option is specified multiple times,the last address given is used. If no address or 0.0.0.0 is specified, the server listens on all interfaces.*\n绑定的IP， 只能绑定一个IP， 如果绑定多个IP, 则以最后一个绑定的为准。如果没有绑定或绑定 0.0.0.0, 服务器监听所有的客户端。\n\n4. Mysql忘记密码怎么办\n利用vim命令打开mysql配置文件my.cnf\n在mysqld进程配置文件中添加skip-grant-tables,添加完成后,执行wd保存\n重启mysql server然后就可以不用密码直接登录mysql了，登录进去后\n执行以下命令修改root密码：\n{% codeblock %}\nmysql>update mysql.user set password=password('newpassword') where user='root';\n{% endcodeblock %}\n#将password()中的newpassword字符更改为你自己的密码。\n密码修改完成后，将my.cnf文件中添加的skip-grant-tables语句注释或删除掉，然后重启数据库即可。","source":"_posts/MySQL连接问题123.md","raw":"---\ntitle: MySQL连接问题123\ndate: 2016-02-26 10:52:07\ntags: 数据库\n---\n\n1. 首先要排查网络问题和防火墙的问题\n这个是必须的， 你要是MySQL的服务器都连不上，那还访问什么？ 怎么检查呢？\nping 192.168.0.11，如果ping 的通的话， 再去检查一下 3306端口是不是被防火墙给挡掉了，telnet 192.168.0.11 3306 或者干脆把防火墙关掉，\nservice iptables stop (Redhat) 或 ufw disable(ubuntu) 这一步没问题的话， 开始下一步。\n\n2. 要排查有没有访问权限\n说到访问权限， MySQL分配用户的时候会指定一个host, 比如我的 host指定为 192.168.0.5 , 那么这个账号就只能用 .5 这一台机器问，其他的机器用这个账号访问会提示没有权限。 host 指定为 % 则表示允许所有的机器访问。 一般来说出于安全方面的考虑，遵循最小权限原则， 权限的问题就不多讲了， 不会的自己查手册。可以使用如下命令：\n{% codeblock %}\nmysql>use mysql;\nmysql>update user set host = '%' where user ='root';\nmysql>select host, user from user;\n{% endcodeblock %}\n如果执行上述命令出现：ERROR 1062 (23000):Duplicate entry'%-root' for key 'PRIMARY' 错误，\n说明host已经有了%这个值，所以直接运行命令：\n{% codeblock %}\nmysql>flushprivileges;\n{% endcodeblock %}\n\n确定了权限没问题的话进行下一步。\n或者直接使用如下命令: grant all privileges on *.* to sa @\"%\" identified by \"12345\";为-usa -p12345用户开通所有机器的访问权限。\n\n3. 要排查MySQL的配置\n检查mysql的配置文件， Linux下MySQL的配置文件叫 my.cnf，windows下的叫 my.ini，检查这个配置项–bind-address=IP\n引用手册里的一段话：\n\t*The IP address to bind to.Only one address can be selected. If this option is specified multiple times,the last address given is used. If no address or 0.0.0.0 is specified, the server listens on all interfaces.*\n绑定的IP， 只能绑定一个IP， 如果绑定多个IP, 则以最后一个绑定的为准。如果没有绑定或绑定 0.0.0.0, 服务器监听所有的客户端。\n\n4. Mysql忘记密码怎么办\n利用vim命令打开mysql配置文件my.cnf\n在mysqld进程配置文件中添加skip-grant-tables,添加完成后,执行wd保存\n重启mysql server然后就可以不用密码直接登录mysql了，登录进去后\n执行以下命令修改root密码：\n{% codeblock %}\nmysql>update mysql.user set password=password('newpassword') where user='root';\n{% endcodeblock %}\n#将password()中的newpassword字符更改为你自己的密码。\n密码修改完成后，将my.cnf文件中添加的skip-grant-tables语句注释或删除掉，然后重启数据库即可。","slug":"MySQL连接问题123","published":1,"updated":"2016-02-26T03:01:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99if000iymzd649hjqjj"},{"title":"LMAX Distruptor","date":"2016-02-25T07:24:06.000Z","_content":"\nLAMAX Distruptor是一个高性能，低延迟的producer-consumer框架。到底有多吊呢，可以参考Github上给出的性能测试结果：\nhttps://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results\n\n其核心就是RingBuffer这个东东, 感兴趣的同学可以参考下面的链接了解更多:\nhttp://mechanitis.blogspot.jp/2011/06/dissecting-disruptor-whats-so-special.html\n\n可以实现多种组合模式，我们这里列举几个比较常用的，在开始之前我们先定义需要在生产者和消费者之间传递的对象，以及产生实例的工厂方法。\n\n{% codeblock lang:java%}\npublic class LongEvent {\n    private long value;\n    public void setValue(long value)\n    {\n        this.value = value;\n    }\n    @Override\n    public String toString(){\n        return this.value + \"\";\n    }\n    public static EventFactory FACTORY = new EventFactory(){\n        @Override\n        public LongEvent newInstance() {\n            return new LongEvent();\n        }\n    };\n}\n{% endcodeblock %}\n\n因为所有的Event对象都是托管给Distruptor由EventFactory创建的，且需要重复利用，所以定义Event的时候必须要提供setter方法。\n其次我们需要定义一个处理Event的handler:\n\n{% codeblock lang:java%}\npublic class LongEventHandler implements EventHandler {\n    private final String name;\n    public LongEventHandler(String name){\n        this.name = name;\n    }\n    public void onEvent(LongEvent event,\n                  long sequence, boolean endOfBatch)\n    {\n        System.out.println(this.name + \": \" + event);\n    }\n}\n{% endcodeblock %}\n\n然后我们定义一个产生Event的Producer:\n\n{% codeblock lang:java %}\npublic class LongEventProducer {\n    private final RingBuffer ringBuffer;\n    public LongEventProducer(RingBuffer ringBuffer)\n    {\n        this.ringBuffer = ringBuffer;\n    }\n\n    public void onData(long val)\n    {\n        // Grab the next sequence\n        long sequence = ringBuffer.next();\n        try\n        {\n            // Get the entry in the Disruptor for the sequence\n            LongEvent event = ringBuffer.get(sequence);\n            // Fill with data\n            event.setValue(val);\n        }\n        finally\n        {\n            //发布Event\n            ringBuffer.publish(sequence);\n        }\n    }\n}\n{% endcodeblock %}\nSingle producer- single consumer:\n{% codeblock lang:java %}\npublic static void main(String[] args){\n    int bufferSize = 1024;\n    Executor executor = Executors.newCachedThreadPool();\n    Disruptor disruptor = new Disruptor(LongEvent.FACTORY,\n            bufferSize,\n            executor, ProducerType.MULTI,\n            new SleepingWaitStrategy());\n    LongEventHandler handler = new new LongEventHandler(\"p1-s1\");\n    disruptor.handleEventsWith(handler);\n\n    LongEventProducer producer = new\n            LongEventProducer(disruptor.getRingBuffer());\n    disruptor.start();\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        producer.onData(i);\n    }\n}\n{% endcodeblock %}\nSingle producer-pipeline consumers:\n{% codeblock lang:java %}\npublic static void main(String[] args){\n    int bufferSize = 1024;\n    Executor executor = Executors.newCachedThreadPool();\n    Disruptor disruptor = new Disruptor(LongEvent.FACTORY,\n            bufferSize,\n            executor, ProducerType.MULTI,\n            new SleepingWaitStrategy());\n    LongEventHandler handler = new LongEventHandler(\"p1-s1\");\n    LongEventHandler handler1 = new LongEventHandler(\"p2-s2\");\n    disruptor.handleEventsWith(handler)\n                .handleEventsWith(handler1);\n\n    LongEventProducer producer = new\n            LongEventProducer(disruptor.getRingBuffer());\n    disruptor.start();\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        producer.onData(i);\n    }\n}\n{% endcodeblock %}\n\n可以发现p2-s2的处理都在p1-s2之后完成\nSingle producer-work pool(多个consumer竞争消费),这种模式是多个handler并发的竞争同一个Event消息，需要实现WorkHandler接口\n{% codeblock lang:java %}\npublic class LongEventHandler2 implements WorkHandler {\n    private final String name;\n    public LongEventHandler2(String name){\n        this.name = name;\n    }\n\n    @Override\n    public void onEvent(LongEvent event) throws Exception {\n        System.out.println(this.name + \": \" + event);\n    }\n\n    public static void main(String[] args){\n        int bufferSize = 1024;\n        Executor executor = Executors.newCachedThreadPool();\n        Disruptor disruptor = new Disruptor(LongEvent.FACTORY,\n                bufferSize,\n                executor, ProducerType.MULTI,\n                new SleepingWaitStrategy());\n        LongEventHandler2 handler = new LongEventHandler2(\"p1-s1\");\n        LongEventHandler2 handler1 = new LongEventHandler2(\"p2-s2\");\n        disruptor.handleEventsWithWorkerPool(handler, handler1);\n\n        LongEventProducer producer = new\n                LongEventProducer(disruptor.getRingBuffer());\n        disruptor.start();\n        for (int i = 0; i &lt; 1000; i++)\n        {\n            producer.onData(i);\n        }\n    }\n}\n{% endcodeblock %}\n\n这三种基本模式还可以组合到一起实现更为复杂的处理逻辑，具体的使用方面同学们可以自己琢磨，最主要的是对RingBuffer的使用， 详细的可以参考Github上的测试代码\n\n关于等待策略WaitStrategy的选择需要特别注意，默认是选择BlockingWaitStrategy。\n\n1. BlockingWaitStrategy:这个策略的内部适用一个锁和条件变量来控制线程的执行和等待（Java基本的同步方法）。BlockingWaitStrategy是最慢的等待策略，但也是CPU使用率最低和最稳定的选项。然而，可以根据不同的部署环境调整选项以提高性能。\n2. SleepingWaitStrategy: 和BlockingWaitStrategy一样，SpleepingWaitStrategy的CPU使用率也比较低。它的方式是循环等待并且在循环中间调用LockSupport.parkNanos(1)来睡眠，（在Linux系统上面睡眠时间60µs）.然而，它的优点在于生产线程只需要计数，而不执行任何指令。并且没有条件变量的消耗。但是，事件对象从生产者到消费者传递的延迟变大了。SleepingWaitStrategy最好用在不需要低延迟，而且事件发布对于生产者的影响比较小的情况下。比如异步日志功能\n3. YieldingWaitStrategy:YieldingWaitStrategy是可以被用在低延迟系统中的两个策略之一，这种策略在减低系统延迟的同时也会增加CPU运算量。YieldingWaitStrategy策略会循环等待sequence增加到合适的值。循环中调用Thread.yield()允许其他准备好的线程执行。如果需要高性能而且事件消费者线程比逻辑内核少的时候，推荐使用YieldingWaitStrategy策略。例如：在开启超线程的时候\n4. BusySpinWaitStrategy:BusySpinWaitStrategy是性能最高的等待策略，同时也是对部署环境要求最高的策略。这个性能最好用在事件处理线程比物理内核数目还要小的时候。例如：在禁用超线程技术的时候。\n\n使用的时候需要根据自己的实际需求选择。\n","source":"_posts/LMAX-Distruptor.md","raw":"---\ntitle: LMAX Distruptor\ndate: 2016-02-25 15:24:06\ntags: Java\n---\n\nLAMAX Distruptor是一个高性能，低延迟的producer-consumer框架。到底有多吊呢，可以参考Github上给出的性能测试结果：\nhttps://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results\n\n其核心就是RingBuffer这个东东, 感兴趣的同学可以参考下面的链接了解更多:\nhttp://mechanitis.blogspot.jp/2011/06/dissecting-disruptor-whats-so-special.html\n\n可以实现多种组合模式，我们这里列举几个比较常用的，在开始之前我们先定义需要在生产者和消费者之间传递的对象，以及产生实例的工厂方法。\n\n{% codeblock lang:java%}\npublic class LongEvent {\n    private long value;\n    public void setValue(long value)\n    {\n        this.value = value;\n    }\n    @Override\n    public String toString(){\n        return this.value + \"\";\n    }\n    public static EventFactory FACTORY = new EventFactory(){\n        @Override\n        public LongEvent newInstance() {\n            return new LongEvent();\n        }\n    };\n}\n{% endcodeblock %}\n\n因为所有的Event对象都是托管给Distruptor由EventFactory创建的，且需要重复利用，所以定义Event的时候必须要提供setter方法。\n其次我们需要定义一个处理Event的handler:\n\n{% codeblock lang:java%}\npublic class LongEventHandler implements EventHandler {\n    private final String name;\n    public LongEventHandler(String name){\n        this.name = name;\n    }\n    public void onEvent(LongEvent event,\n                  long sequence, boolean endOfBatch)\n    {\n        System.out.println(this.name + \": \" + event);\n    }\n}\n{% endcodeblock %}\n\n然后我们定义一个产生Event的Producer:\n\n{% codeblock lang:java %}\npublic class LongEventProducer {\n    private final RingBuffer ringBuffer;\n    public LongEventProducer(RingBuffer ringBuffer)\n    {\n        this.ringBuffer = ringBuffer;\n    }\n\n    public void onData(long val)\n    {\n        // Grab the next sequence\n        long sequence = ringBuffer.next();\n        try\n        {\n            // Get the entry in the Disruptor for the sequence\n            LongEvent event = ringBuffer.get(sequence);\n            // Fill with data\n            event.setValue(val);\n        }\n        finally\n        {\n            //发布Event\n            ringBuffer.publish(sequence);\n        }\n    }\n}\n{% endcodeblock %}\nSingle producer- single consumer:\n{% codeblock lang:java %}\npublic static void main(String[] args){\n    int bufferSize = 1024;\n    Executor executor = Executors.newCachedThreadPool();\n    Disruptor disruptor = new Disruptor(LongEvent.FACTORY,\n            bufferSize,\n            executor, ProducerType.MULTI,\n            new SleepingWaitStrategy());\n    LongEventHandler handler = new new LongEventHandler(\"p1-s1\");\n    disruptor.handleEventsWith(handler);\n\n    LongEventProducer producer = new\n            LongEventProducer(disruptor.getRingBuffer());\n    disruptor.start();\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        producer.onData(i);\n    }\n}\n{% endcodeblock %}\nSingle producer-pipeline consumers:\n{% codeblock lang:java %}\npublic static void main(String[] args){\n    int bufferSize = 1024;\n    Executor executor = Executors.newCachedThreadPool();\n    Disruptor disruptor = new Disruptor(LongEvent.FACTORY,\n            bufferSize,\n            executor, ProducerType.MULTI,\n            new SleepingWaitStrategy());\n    LongEventHandler handler = new LongEventHandler(\"p1-s1\");\n    LongEventHandler handler1 = new LongEventHandler(\"p2-s2\");\n    disruptor.handleEventsWith(handler)\n                .handleEventsWith(handler1);\n\n    LongEventProducer producer = new\n            LongEventProducer(disruptor.getRingBuffer());\n    disruptor.start();\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        producer.onData(i);\n    }\n}\n{% endcodeblock %}\n\n可以发现p2-s2的处理都在p1-s2之后完成\nSingle producer-work pool(多个consumer竞争消费),这种模式是多个handler并发的竞争同一个Event消息，需要实现WorkHandler接口\n{% codeblock lang:java %}\npublic class LongEventHandler2 implements WorkHandler {\n    private final String name;\n    public LongEventHandler2(String name){\n        this.name = name;\n    }\n\n    @Override\n    public void onEvent(LongEvent event) throws Exception {\n        System.out.println(this.name + \": \" + event);\n    }\n\n    public static void main(String[] args){\n        int bufferSize = 1024;\n        Executor executor = Executors.newCachedThreadPool();\n        Disruptor disruptor = new Disruptor(LongEvent.FACTORY,\n                bufferSize,\n                executor, ProducerType.MULTI,\n                new SleepingWaitStrategy());\n        LongEventHandler2 handler = new LongEventHandler2(\"p1-s1\");\n        LongEventHandler2 handler1 = new LongEventHandler2(\"p2-s2\");\n        disruptor.handleEventsWithWorkerPool(handler, handler1);\n\n        LongEventProducer producer = new\n                LongEventProducer(disruptor.getRingBuffer());\n        disruptor.start();\n        for (int i = 0; i &lt; 1000; i++)\n        {\n            producer.onData(i);\n        }\n    }\n}\n{% endcodeblock %}\n\n这三种基本模式还可以组合到一起实现更为复杂的处理逻辑，具体的使用方面同学们可以自己琢磨，最主要的是对RingBuffer的使用， 详细的可以参考Github上的测试代码\n\n关于等待策略WaitStrategy的选择需要特别注意，默认是选择BlockingWaitStrategy。\n\n1. BlockingWaitStrategy:这个策略的内部适用一个锁和条件变量来控制线程的执行和等待（Java基本的同步方法）。BlockingWaitStrategy是最慢的等待策略，但也是CPU使用率最低和最稳定的选项。然而，可以根据不同的部署环境调整选项以提高性能。\n2. SleepingWaitStrategy: 和BlockingWaitStrategy一样，SpleepingWaitStrategy的CPU使用率也比较低。它的方式是循环等待并且在循环中间调用LockSupport.parkNanos(1)来睡眠，（在Linux系统上面睡眠时间60µs）.然而，它的优点在于生产线程只需要计数，而不执行任何指令。并且没有条件变量的消耗。但是，事件对象从生产者到消费者传递的延迟变大了。SleepingWaitStrategy最好用在不需要低延迟，而且事件发布对于生产者的影响比较小的情况下。比如异步日志功能\n3. YieldingWaitStrategy:YieldingWaitStrategy是可以被用在低延迟系统中的两个策略之一，这种策略在减低系统延迟的同时也会增加CPU运算量。YieldingWaitStrategy策略会循环等待sequence增加到合适的值。循环中调用Thread.yield()允许其他准备好的线程执行。如果需要高性能而且事件消费者线程比逻辑内核少的时候，推荐使用YieldingWaitStrategy策略。例如：在开启超线程的时候\n4. BusySpinWaitStrategy:BusySpinWaitStrategy是性能最高的等待策略，同时也是对部署环境要求最高的策略。这个性能最好用在事件处理线程比物理内核数目还要小的时候。例如：在禁用超线程技术的时候。\n\n使用的时候需要根据自己的实际需求选择。\n","slug":"LMAX-Distruptor","published":1,"updated":"2016-02-25T07:28:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99ij000kymzdg05mr4ig"},{"title":"Kafka安装配置","date":"2016-03-02T03:04:50.000Z","_content":"我们使用3台机器搭建Kafka集群：\n```java\n192.168.4.142   h1\n192.168.4.143   h2\n192.168.4.144   h3\n\n```\n在安装Kafka集群之前，这里没有使用Kafka自带的Zookeeper，而是独立安装了一个Zookeeper集群，也是使用这3台机器，保证Zookeeper集群正常运行。\n首先，在h1上准备Kafka安装文件，执行如下命令：\n```java\ncd /usr/local/\nwget http://mirror.bit.edu.cn/apache/kafka/0.8.1.1/kafka_2.9.2-0.8.1.1.tgz\ntar xvzf kafka_2.9.2-0.8.1.1.tgz\nln -s /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\nchown -R kafka:kafka /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\n```\n修改配置文件/usr/local/kafka/config/server.properties，修改如下内容：\n```java\nbroker.id=0\nzookeeper.connect=h1:2181,h2:2181,h3:2181/kafka\n```\n\n这里需要说明的是，默认Kafka会使用ZooKeeper默认的/路径，这样有关Kafka的ZooKeeper配置就会散落在根路径下面，如果你有其他的应用也在使用ZooKeeper集群，查看ZooKeeper中数据可能会不直观，所以强烈建议指定一个chroot路径，直接在zookeeper.connect配置项中指定：\n```java\nzookeeper.connect=h1:2181,h2:2181,h3:2181/kafka\n```\n\n而且，需要手动在ZooKeeper中创建路径/kafka，使用如下命令连接到任意一台ZooKeeper服务器：\n```java\ncd /usr/local/zookeeper\nbin/zkCli.sh\n```\n\n在ZooKeeper执行如下命令创建chroot路径：\n```java\ncreate /kafka ''\n```\n这样，每次连接Kafka集群的时候（使用--zookeeper选项），也必须使用带chroot路径的连接字符串，后面会看到。\n然后，将配置好的安装文件同步到其他的h2、h3节点上：\n```java\nscp -r /usr/local/kafka_2.9.2-0.8.1.1/ h2:/usr/local/\nscp -r /usr/local/kafka_2.9.2-0.8.1.1/ h3:/usr/local/\n```\n\n最后，在h2、h3节点上配置，执行如下命令：\n```java\ncd /usr/local/\nln -s /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\nchown -R kafka:kafka /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\n```\n\n并修改配置文件/usr/local/kafka/config/server.properties内容如下所示：\n```java\nbroker.id=1  # 在h1修改\nbroker.id=2  # 在h2修改\n```\n\n因为Kafka集群需要保证各个Broker的id在整个集群中必须唯一，需要调整这个配置项的值（如果在单机上，可以通过建立多个Broker进程来模拟分布式的Kafka集群，也需要Broker的id唯一，还需要修改一些配置目录的信息）。\n在集群中的h1、h2、h3这三个节点上分别启动Kafka，分别执行如下命令：\n```java\nbin/kafka-server-start.sh /usr/local/kafka/config/server.properties &\n```\n可以通过查看日志，或者检查进程状态，保证Kafka集群启动成功。\n\n我们创建一个名称为my-replicated-topic5的Topic，5个分区，并且复制因子为3，执行如下命令：\n```java\nbin/kafka-topics.sh --create --zookeeper h1:2181,h2:2181,h3:2181/kafka /\n\t--replication-factor 3 --partitions 5 --topic my-replicated-topic5\n```\n\n查看创建的Topic，执行如下命令：\n```java\nbin/kafka-topics.sh --describe --zookeeper h1:2181,h2:2181,h3:2181/kafka /\n\t--topic my-replicated-topic5\n```\n\n上面Leader、Replicas、Isr的含义如下：\n```java\nPartition： 分区\nLeader   ： 负责读写指定分区的节点\nReplicas ： 复制该分区log的节点列表\nIsr      ： \"in-sync\" replicas，当前活跃的副本列表（是一个子集），并且可能成为Leader\n```\n我们可以通过Kafka自带的bin/kafka-console-producer.sh和bin/kafka-console-consumer.sh脚本，来验证演示如果发布消息、消费消息。\n在一个终端，启动Producer，并向我们上面创建的名称为my-replicated-topic5的Topic中生产消息，执行如下脚本：\n```java\nbin/kafka-console-producer.sh --broker-list h1:9092,h2:9092,h3:9092 /\n\t--topic my-replicated-topic5\n```\n\n在另一个终端，启动Consumer，并订阅我们上面创建的名称为my-replicated-topic5的Topic中生产的消息，执行如下脚本：\n```java\nbin/kafka-console-consumer.sh --zookeeper h1:2181,h2:2181,h3:2181/kafka /\n\t--from-beginning --topic my-replicated-topic5\n```\n可以在Producer终端上输入字符串消息行，然后回车，就可以在Consumer终端上看到消费者消费的消息内容。也可以参考Kafka的Producer和Consumer的Java API，通过API编码的方式来实现消息生产和消费的处理逻辑。","source":"_posts/Kafka安装配置.md","raw":"---\ntitle: Kafka安装配置\ndate: 2016-03-02 11:04:50\ntags: 大数据\n---\n我们使用3台机器搭建Kafka集群：\n```java\n192.168.4.142   h1\n192.168.4.143   h2\n192.168.4.144   h3\n\n```\n在安装Kafka集群之前，这里没有使用Kafka自带的Zookeeper，而是独立安装了一个Zookeeper集群，也是使用这3台机器，保证Zookeeper集群正常运行。\n首先，在h1上准备Kafka安装文件，执行如下命令：\n```java\ncd /usr/local/\nwget http://mirror.bit.edu.cn/apache/kafka/0.8.1.1/kafka_2.9.2-0.8.1.1.tgz\ntar xvzf kafka_2.9.2-0.8.1.1.tgz\nln -s /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\nchown -R kafka:kafka /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\n```\n修改配置文件/usr/local/kafka/config/server.properties，修改如下内容：\n```java\nbroker.id=0\nzookeeper.connect=h1:2181,h2:2181,h3:2181/kafka\n```\n\n这里需要说明的是，默认Kafka会使用ZooKeeper默认的/路径，这样有关Kafka的ZooKeeper配置就会散落在根路径下面，如果你有其他的应用也在使用ZooKeeper集群，查看ZooKeeper中数据可能会不直观，所以强烈建议指定一个chroot路径，直接在zookeeper.connect配置项中指定：\n```java\nzookeeper.connect=h1:2181,h2:2181,h3:2181/kafka\n```\n\n而且，需要手动在ZooKeeper中创建路径/kafka，使用如下命令连接到任意一台ZooKeeper服务器：\n```java\ncd /usr/local/zookeeper\nbin/zkCli.sh\n```\n\n在ZooKeeper执行如下命令创建chroot路径：\n```java\ncreate /kafka ''\n```\n这样，每次连接Kafka集群的时候（使用--zookeeper选项），也必须使用带chroot路径的连接字符串，后面会看到。\n然后，将配置好的安装文件同步到其他的h2、h3节点上：\n```java\nscp -r /usr/local/kafka_2.9.2-0.8.1.1/ h2:/usr/local/\nscp -r /usr/local/kafka_2.9.2-0.8.1.1/ h3:/usr/local/\n```\n\n最后，在h2、h3节点上配置，执行如下命令：\n```java\ncd /usr/local/\nln -s /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\nchown -R kafka:kafka /usr/local/kafka_2.9.2-0.8.1.1 /usr/local/kafka\n```\n\n并修改配置文件/usr/local/kafka/config/server.properties内容如下所示：\n```java\nbroker.id=1  # 在h1修改\nbroker.id=2  # 在h2修改\n```\n\n因为Kafka集群需要保证各个Broker的id在整个集群中必须唯一，需要调整这个配置项的值（如果在单机上，可以通过建立多个Broker进程来模拟分布式的Kafka集群，也需要Broker的id唯一，还需要修改一些配置目录的信息）。\n在集群中的h1、h2、h3这三个节点上分别启动Kafka，分别执行如下命令：\n```java\nbin/kafka-server-start.sh /usr/local/kafka/config/server.properties &\n```\n可以通过查看日志，或者检查进程状态，保证Kafka集群启动成功。\n\n我们创建一个名称为my-replicated-topic5的Topic，5个分区，并且复制因子为3，执行如下命令：\n```java\nbin/kafka-topics.sh --create --zookeeper h1:2181,h2:2181,h3:2181/kafka /\n\t--replication-factor 3 --partitions 5 --topic my-replicated-topic5\n```\n\n查看创建的Topic，执行如下命令：\n```java\nbin/kafka-topics.sh --describe --zookeeper h1:2181,h2:2181,h3:2181/kafka /\n\t--topic my-replicated-topic5\n```\n\n上面Leader、Replicas、Isr的含义如下：\n```java\nPartition： 分区\nLeader   ： 负责读写指定分区的节点\nReplicas ： 复制该分区log的节点列表\nIsr      ： \"in-sync\" replicas，当前活跃的副本列表（是一个子集），并且可能成为Leader\n```\n我们可以通过Kafka自带的bin/kafka-console-producer.sh和bin/kafka-console-consumer.sh脚本，来验证演示如果发布消息、消费消息。\n在一个终端，启动Producer，并向我们上面创建的名称为my-replicated-topic5的Topic中生产消息，执行如下脚本：\n```java\nbin/kafka-console-producer.sh --broker-list h1:9092,h2:9092,h3:9092 /\n\t--topic my-replicated-topic5\n```\n\n在另一个终端，启动Consumer，并订阅我们上面创建的名称为my-replicated-topic5的Topic中生产的消息，执行如下脚本：\n```java\nbin/kafka-console-consumer.sh --zookeeper h1:2181,h2:2181,h3:2181/kafka /\n\t--from-beginning --topic my-replicated-topic5\n```\n可以在Producer终端上输入字符串消息行，然后回车，就可以在Consumer终端上看到消费者消费的消息内容。也可以参考Kafka的Producer和Consumer的Java API，通过API编码的方式来实现消息生产和消费的处理逻辑。","slug":"Kafka安装配置","published":1,"updated":"2016-03-02T03:27:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99il000mymzdb8v4dh73"},{"title":"K-近临算法","date":"2016-02-24T16:14:52.000Z","_content":"\nK-近临算法，有叫KNN算法，机器学习常用的一种算法，用于对多个维度的信息进行归类，打标签, 指纹识别，手写数字识别，人脸识别等。算法的特点是简单易懂， 适用数据范围是数值型和标称型，缺点是效率不高。\n\n基本思路如下:\n1. 遍历样本中的每一条信息，并计算与当前待分类信息的距离。这里利用的是欧氏距离公式。\n2. 按照距离递增次序排序\n3. 选取与当前点距离最小的K个点\n4. 确定前K个点所在类别的出现频率\n5. 返回前N个点出现频率最高的类别作为当前点的预测分类\n\n然后可以和测试样本中的数据进行比对，并计算错误率，完美分类器的错误率为0 , 最差分类器的错误率是1。\n\n此外当样本不平衡时，如一个类的样本容量很大，而其他类样本容量很小时，有可能导致当输入一个新样本时，该样本的K个邻居中大容量类的样本占多数。\n\n当各个维度不是平等的话，更有用的做法是对数据添加权值(Weight)， 如权值与距离成反比。\n\n可以使用Matplotlib对数据做比较直观的呈现","source":"_posts/K-近临算法.md","raw":"---\ntitle: K-近临算法\ndate: 2016-02-25 00:14:52\ntags: 机器学习\n---\n\nK-近临算法，有叫KNN算法，机器学习常用的一种算法，用于对多个维度的信息进行归类，打标签, 指纹识别，手写数字识别，人脸识别等。算法的特点是简单易懂， 适用数据范围是数值型和标称型，缺点是效率不高。\n\n基本思路如下:\n1. 遍历样本中的每一条信息，并计算与当前待分类信息的距离。这里利用的是欧氏距离公式。\n2. 按照距离递增次序排序\n3. 选取与当前点距离最小的K个点\n4. 确定前K个点所在类别的出现频率\n5. 返回前N个点出现频率最高的类别作为当前点的预测分类\n\n然后可以和测试样本中的数据进行比对，并计算错误率，完美分类器的错误率为0 , 最差分类器的错误率是1。\n\n此外当样本不平衡时，如一个类的样本容量很大，而其他类样本容量很小时，有可能导致当输入一个新样本时，该样本的K个邻居中大容量类的样本占多数。\n\n当各个维度不是平等的话，更有用的做法是对数据添加权值(Weight)， 如权值与距离成反比。\n\n可以使用Matplotlib对数据做比较直观的呈现","slug":"K-近临算法","published":1,"updated":"2016-02-25T05:41:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilaa99io000pymzdr7d3mlmu"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cilaa99hy0002ymzdzbzpheh4","tag_id":"cilaa99i00003ymzd4uaheqkt","_id":"cilaa99i20004ymzdvqdsxje0"},{"post_id":"cilaa99i30005ymzdu3kdus7q","tag_id":"cilaa99i40006ymzdis9m6ebg","_id":"cilaa99i40007ymzdbt6z1heo"},{"post_id":"cilaa99i60008ymzdwyz8usuf","tag_id":"cilaa99i70009ymzd6r4k3kb4","_id":"cilaa99i7000aymzd27nt4olq"},{"post_id":"cilaa99i8000bymzdzno61t16","tag_id":"cilaa99i9000cymzd1rimbfci","_id":"cilaa99i9000dymzdjsjle2dr"},{"post_id":"cilaa99ic000fymzduw7qojlv","tag_id":"cilaa99id000gymzdna2jgs4e","_id":"cilaa99ie000hymzdyxcq120c"},{"post_id":"cilaa99if000iymzd649hjqjj","tag_id":"cilaa99i70009ymzd6r4k3kb4","_id":"cilaa99ih000jymzd6s66sh3l"},{"post_id":"cilaa99ij000kymzdg05mr4ig","tag_id":"cilaa99id000gymzdna2jgs4e","_id":"cilaa99ik000lymzdg1r21rf9"},{"post_id":"cilaa99il000mymzdb8v4dh73","tag_id":"cilaa99in000nymzd13ar4l3o","_id":"cilaa99in000oymzdmogpk1zh"},{"post_id":"cilaa99io000pymzdr7d3mlmu","tag_id":"cilaa99i40006ymzdis9m6ebg","_id":"cilaa99ip000qymzduz5ybwur"},{"post_id":"cilaa99ia000eymzdpt1w94l1","tag_id":"cilaa99in000nymzd13ar4l3o","_id":"cilaa9gin000rymzdtaxay831"}],"Tag":[{"name":"杂","_id":"cilaa99i00003ymzd4uaheqkt"},{"name":"机器学习","_id":"cilaa99i40006ymzdis9m6ebg"},{"name":"数据库","_id":"cilaa99i70009ymzd6r4k3kb4"},{"name":"分布式","_id":"cilaa99i9000cymzd1rimbfci"},{"name":"Java","_id":"cilaa99id000gymzdna2jgs4e"},{"name":"大数据","_id":"cilaa99in000nymzd13ar4l3o"}]}}